<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>跨域与同域策略</title>
    <url>/2018/09/17/csrf-xss-about/</url>
    <content><![CDATA[<p><strong>跨域</strong>：跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。</p>
<p>广义的跨域：</p>
<ul>
<li>资源跳转：A链接、重定向、表单提交</li>
<li>资源嵌入：<code>&lt;link&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;frame&gt;</code>等 dom 标签，还有样式中<code>background:url()、@font-face()</code> 等文件外链</li>
<li>脚本请求： js 发起的 ajax 请求、dom 和 js 对象的跨域操作等</li>
</ul>
<a id="more"></a>
<p><strong>同域策略</strong>：同源策略/SOP（Same origin policy）是一种约定，由 Netscape 公司 1995 年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到 XSS、CSFR 等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p>
<p>同源策略限制以下几种行为：</p>
<ul>
<li>Cookie、LocalStorage 和 IndexDB 无法读取</li>
<li>DOM 和 Js对象无法获得</li>
<li>AJAX 请求不能发送</li>
</ul>
<h2 id="常见跨域场景"><a href="#常见跨域场景" class="headerlink" title="常见跨域场景"></a>常见跨域场景</h2><table>
<thead>
<tr>
<th>URL</th>
<th>说明</th>
<th>是否允许通信</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>http://www.domain.com/a.js</code><br><code>http://www.domain.com/b.js</code><br><code>http://www.domain.com/lab/c.js</code></td>
<td>同一域名，不同文件或路径</td>
<td>允许</td>
</tr>
<tr>
<td><code>http://www.domain.com:8000/a.js</code><br><code>http://www.domain.com/b.js</code></td>
<td>同一域名，不同端口</td>
<td>不允许</td>
</tr>
<tr>
<td><code>http://www.domain.com/a.js</code><br><code>https://www.domain.com/a.js</code></td>
<td>同一域名，不同协议</td>
<td>不允许</td>
</tr>
<tr>
<td><code>http://www.domain.com/a.js</code><br><code>http://192.168.4.12/b.js</code></td>
<td>域名和域名对应相同ip</td>
<td>不允许</td>
</tr>
<tr>
<td><code>http://www.domain.com/a.js</code><br><code>http://x.domain.com/b.js</code><br><code>http://domain.com/c.js</code></td>
<td>主域相同，子域不同</td>
<td>不允许</td>
</tr>
<tr>
<td><code>http://www.domain1.com/a.js</code><br><code>http://www.domain2.com/b.js</code></td>
<td>不同域名</td>
<td>不允许</td>
</tr>
</tbody>
</table>
<h2 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h2><ul>
<li>通过jsonp跨域</li>
<li>document.domain + iframe跨域</li>
<li>location.hash + iframe</li>
<li>window.name + iframe跨域</li>
<li>postMessage跨域</li>
<li>跨域资源共享（CORS）</li>
<li>nginx代理跨域</li>
<li>nodejs中间件代理跨域</li>
<li>WebSocket协议跨域</li>
</ul>
<h2 id="相关名词"><a href="#相关名词" class="headerlink" title="相关名词"></a>相关名词</h2><blockquote>
<p>CSRF（Cross-site request forgery）跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与XSS非常不同，XSS利用站点内的信任用户，而CSRF则通过伪装来自受信任用户的请求来利用受信任的网站。</p>
</blockquote>
<blockquote>
<p>XSS(Cross Site Scripting) 跨站脚本攻击，为了不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。</p>
</blockquote>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 函数防抖与函数节流</title>
    <url>/2018/08/02/javascript-debounce-throttle/</url>
    <content><![CDATA[<h2 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h2><p>其概念其实是从机械开关和继电器的“去弹跳”（debounce）衍生出来的，基本思路就是把多个信号合并为一个信号。事件内的N个动作会变忽略，只有事件后<code>由程序触发</code>的动作有效。如果在间隔内触发的事件会取消上次事件，并等待是否间隔内还有事件触发，如果有则继续取消执行，如果没有则执行本次事件。</p>
<h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>每次执行函数前，先清除上次的 setTimeout ，如果在间隔时间内没有再次触发事件，则执行最终的函数</p>
<ul>
<li>用于需要频繁调用的方法时，如input输入框架的格式验证，提交按钮的点击事件</li>
<li>在用户不触发事件后才触发动作，并且抑制了本来在事件中要执行的动作。</li>
</ul>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> timeout, result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> debounced = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 2.修复this指向问题</span></span><br><span class="line">        <span class="keyword">var</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="comment">// 3.参数传递问题</span></span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="comment">// 1.取消timeout实现防抖</span></span><br><span class="line">        <span class="keyword">if</span> (timeout) clearTimeout(timeout);</span><br><span class="line">        <span class="comment">// 4.立即执行</span></span><br><span class="line">        <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">            <span class="comment">// 如果已经执行过，不再执行</span></span><br><span class="line">            <span class="keyword">var</span> callNow = !timeout;</span><br><span class="line">            timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                timeout = <span class="literal">null</span>;</span><br><span class="line">            &#125;, wait)</span><br><span class="line">            <span class="comment">// 5.返回值问题</span></span><br><span class="line">            <span class="keyword">if</span> (callNow) result = func.apply(context, args)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                func.apply(context, args)</span><br><span class="line">            &#125;, wait);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 增加重新立即执行</span></span><br><span class="line">    debounced.cancel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(timeout);</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> debounced;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><p>如果你持续触发事件，每隔一段时间，执行一次事件。不受上次未执行事件影响，固定事件间隔执行事件。</p>
<p>节流（throttle）的概念可以想象一下水坝，你建了水坝在河道中，不能让水流动不了，你只能让水流慢些。换言之，你不能让用户的方法都不执行。如果这样干，就是debounce了。为了让用户的方法在某个时间段内只执行一次，我们需要保存上次执行的时间点与定时器。</p>
<ul>
<li>用于更频繁触发的事件，如resize, touchmove, mousemove, scroll。</li>
<li>比较适合应用于动画相关的场景。</li>
</ul>
<p>关于节流的实现，有两种主流的实现方式，一种是使用时间戳，一种是设置定时器。</p>
<h3 id="1-时间戳"><a href="#1-时间戳" class="headerlink" title="1. 时间戳"></a>1. 时间戳</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context, args;</span><br><span class="line">    <span class="keyword">var</span> previous = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        context = <span class="keyword">this</span>;</span><br><span class="line">        args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (now - previous &gt; wait) &#123;</span><br><span class="line">            func.apply(context, args);</span><br><span class="line">            previous = now;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-定时器"><a href="#2-定时器" class="headerlink" title="2. 定时器"></a>2. 定时器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeout;</span><br><span class="line">    <span class="keyword">var</span> previous = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        context = <span class="keyword">this</span>;</span><br><span class="line">        args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">            timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                timeout = <span class="literal">null</span>;</span><br><span class="line">                func.apply(context, args)</span><br><span class="line">            &#125;, wait)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>第一种事件会立刻执行，第二种事件会在 n 秒后第一次执行</li>
<li>第一种事件停止触发后没有办法再执行事件，第二种事件停止触发后依然会再执行一次事件</li>
</ul>
<h3 id="3-优化"><a href="#3-优化" class="headerlink" title="3. 优化"></a>3. 优化</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeout, context, args, result;</span><br><span class="line">    <span class="keyword">var</span> previous = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!options) options = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        previous = options.leading === <span class="literal">false</span> ? <span class="number">0</span> : <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">        func.apply(context, args);</span><br><span class="line">        <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> throttled = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        <span class="keyword">if</span> (!previous &amp;&amp; options.leading === <span class="literal">false</span>) previous = now;</span><br><span class="line">        <span class="keyword">var</span> remaining = wait - (now - previous);</span><br><span class="line">        context = <span class="keyword">this</span>;</span><br><span class="line">        args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span> || remaining &gt; wait) &#123;</span><br><span class="line">            <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">                clearTimeout(timeout);</span><br><span class="line">                timeout = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            previous = now;</span><br><span class="line">            func.apply(context, args);</span><br><span class="line">            <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timeout &amp;&amp; options.trailing !== <span class="literal">false</span>) &#123;</span><br><span class="line">            timeout = setTimeout(later, remaining);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    throttled.cancel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(timeout);</span><br><span class="line">        previous = <span class="number">0</span>;</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> throttled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS @font-face 使用</title>
    <url>/2018/07/04/css-font-face-note/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"AiDeep"</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"./AiDeep.otf"</span>) <span class="built_in">format</span>(<span class="string">"opentype"</span>);</span><br><span class="line">  <span class="comment">/* 错误的写法 */</span></span><br><span class="line">  <span class="comment">/* src: url('./AiDeep.otf') format("otf"); */</span></span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在添加自定义字体时，遇到无效的作用，起初以为是字体文件没有引用正确，后来发现是设置 <code>src</code> 时 <code>format</code> 没有填写正确，以为把字体文件后缀名传入 <code>format</code> 就可以了，还是太 naive 了。总结下常用字体文件格式以及 <code>@font-face</code> 的用法。</p>
<a id="more"></a>
<h2 id="font-face"><a href="#font-face" class="headerlink" title="@font-face"></a>@font-face</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face" target="_blank" rel="noopener">@font-face</a> 是 CSS3 提供的一个 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule" target="_blank" rel="noopener">at-rule</a>，用于指定一个自定义字体。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="src"><a href="#src" class="headerlink" title="src"></a>src</h3><p>设置自定义字体的文件位置以及格式</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* &lt;url&gt; values */</span></span><br><span class="line">src: url(https://somewebsite.com/path/to/font.woff); /* absolute URL */</span><br><span class="line">src: url(path/to/font.woff); /* relative URL */</span><br><span class="line">src: url(path/to/font.woff) format("woff"); /* explicit format */</span><br><span class="line">src: url("path/to/font.woff"); /* quoted URL */</span><br><span class="line">src: url(path/to/svgfont.svg#example); /* fragment identifying font */</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &lt;font-face-name&gt; values */</span></span><br><span class="line"><span class="selector-tag">src</span>: <span class="selector-tag">local</span>(<span class="selector-tag">font</span>); <span class="comment">/* unquoted name */</span></span><br><span class="line"><span class="selector-tag">src</span>: <span class="selector-tag">local</span>(<span class="selector-tag">some</span> <span class="selector-tag">font</span>); <span class="comment">/* name containing space */</span></span><br><span class="line"><span class="selector-tag">src</span>: <span class="selector-tag">local</span>("<span class="selector-tag">font</span>"); <span class="comment">/* quoted name */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Multiple items */</span></span><br><span class="line">src: local(font), url(path/to/font.svg) format("svg"), url(path/to/font.woff)</span><br><span class="line">    format("woff"), url(path/to/font.otf) format("opentype");</span><br></pre></td></tr></table></figure>
<p>format 可接收参数有：<code>woff</code>, <code>woff2</code>, <code>truetype</code>, <code>opentype</code>, <code>embedded-opentype</code>, <code>svg</code></p>
<h3 id="font-display"><a href="#font-display" class="headerlink" title="font-display"></a>font-display</h3><p>用于自定义字体加载过程时的显示问题</p>
<ul>
<li><code>auto</code>: 默认值。典型的浏览器字体加载的行为会发生，也就是使用自定义字体的文本会先被隐藏，直到字体加载结束才会显示。</li>
<li><code>block</code>: 如果字体未加载完成，浏览器将首先绘制“隐形”文本；一旦字体加载完成，立即切换字体。</li>
<li><code>swap</code>：浏览器不会等待字体加载，直接使用字体栈中符合条件的字体先显示出来，等自定义字体加载完毕后再切换回来</li>
<li><code>fallback</code>: 需要使用自定义字体渲染的文本会在较短的时间（100ms according to Google ）不可见，如果自定义字体还没有加载结束，那么就先加载无样式的文本。一旦自定义字体加载结束，那么文本就会被正确赋予样式。</li>
<li><code>optional</code>: 和 <code>fallback</code> 基本相同，区别是让浏览器自由决定是否使用自定义字体</li>
</ul>
<h3 id="font-family"><a href="#font-family" class="headerlink" title="font-family"></a>font-family</h3><p>指定一个字体名称，之后可以设置字体属性为当前值</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* &lt;string&gt; values */</span></span><br><span class="line"><span class="selector-tag">font-family</span>: "<span class="selector-tag">font</span> <span class="selector-tag">family</span>";</span><br><span class="line"><span class="selector-tag">font-family</span>: "<span class="selector-tag">another</span> <span class="selector-tag">font</span> <span class="selector-tag">family</span>";</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &lt;custom-ident&gt; value */</span></span><br><span class="line"><span class="selector-tag">font-family</span>: <span class="selector-tag">examplefont</span>;</span><br></pre></td></tr></table></figure>
<h3 id="font-style"><a href="#font-style" class="headerlink" title="font-style"></a>font-style</h3><p>字体样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">font-style</span>: <span class="selector-tag">normal</span>;</span><br><span class="line"><span class="selector-tag">font-style</span>: <span class="selector-tag">italic</span>;</span><br><span class="line"><span class="selector-tag">font-style</span>: <span class="selector-tag">oblique</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Global values */</span></span><br><span class="line"><span class="selector-tag">font-style</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line"><span class="selector-tag">font-style</span>: <span class="selector-tag">initial</span>;</span><br><span class="line"><span class="selector-tag">font-style</span>: <span class="selector-tag">unset</span>;</span><br></pre></td></tr></table></figure>
<h3 id="font-weight"><a href="#font-weight" class="headerlink" title="font-weight"></a>font-weight</h3><p>设置字体的粗细</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Keyword values */</span></span><br><span class="line"><span class="selector-tag">font-weight</span>: <span class="selector-tag">normal</span>;</span><br><span class="line"><span class="selector-tag">font-weight</span>: <span class="selector-tag">bold</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Keyword values relative to the parent */</span></span><br><span class="line"><span class="selector-tag">font-weight</span>: <span class="selector-tag">lighter</span>;</span><br><span class="line"><span class="selector-tag">font-weight</span>: <span class="selector-tag">bolder</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Numeric keyword values */</span></span><br><span class="line"><span class="selector-tag">font-weight</span>: 100;</span><br><span class="line"><span class="selector-tag">font-weight</span>: 200;</span><br><span class="line"><span class="selector-tag">font-weight</span>: 300;</span><br><span class="line"><span class="selector-tag">font-weight</span>: 400;</span><br><span class="line"><span class="selector-tag">font-weight</span>: 500;</span><br><span class="line"><span class="selector-tag">font-weight</span>: 600;</span><br><span class="line"><span class="selector-tag">font-weight</span>: 700;</span><br><span class="line"><span class="selector-tag">font-weight</span>: 800;</span><br><span class="line"><span class="selector-tag">font-weight</span>: 900;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Global values */</span></span><br><span class="line"><span class="selector-tag">font-weight</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line"><span class="selector-tag">font-weight</span>: <span class="selector-tag">initial</span>;</span><br><span class="line"><span class="selector-tag">font-weight</span>: <span class="selector-tag">unset</span>;</span><br></pre></td></tr></table></figure>
<h3 id="font-stretch"><a href="#font-stretch" class="headerlink" title="font-stretch"></a>font-stretch</h3><p>字体显示为正常、缩小、拉伸等样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Keyword values */</span></span><br><span class="line"><span class="selector-tag">font-stretch</span>: <span class="selector-tag">ultra-condensed</span>;</span><br><span class="line"><span class="selector-tag">font-stretch</span>: <span class="selector-tag">extra-condensed</span>;</span><br><span class="line"><span class="selector-tag">font-stretch</span>: <span class="selector-tag">condensed</span>;</span><br><span class="line"><span class="selector-tag">font-stretch</span>: <span class="selector-tag">semi-condensed</span>;</span><br><span class="line"><span class="selector-tag">font-stretch</span>: <span class="selector-tag">normal</span>;</span><br><span class="line"><span class="selector-tag">font-stretch</span>: <span class="selector-tag">semi-expanded</span>;</span><br><span class="line"><span class="selector-tag">font-stretch</span>: <span class="selector-tag">expanded</span>;</span><br><span class="line"><span class="selector-tag">font-stretch</span>: <span class="selector-tag">extra-expanded</span>;</span><br><span class="line"><span class="selector-tag">font-stretch</span>: <span class="selector-tag">ultra-expanded</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Global values */</span></span><br><span class="line"><span class="selector-tag">font-stretch</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line"><span class="selector-tag">font-stretch</span>: <span class="selector-tag">initial</span>;</span><br><span class="line"><span class="selector-tag">font-stretch</span>: <span class="selector-tag">unset</span>;</span><br></pre></td></tr></table></figure>
<h3 id="font-variant"><a href="#font-variant" class="headerlink" title="font-variant"></a>font-variant</h3><p>快速设置 font-variant-caps, font-variant-numeric, font-variant-alternates, font-variant-ligatures, 和 font-variant-east-asian。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">font-variant</span>: <span class="selector-tag">small-caps</span>;</span><br><span class="line"><span class="selector-tag">font-variant</span>: <span class="selector-tag">common-ligatures</span> <span class="selector-tag">small-caps</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Global values */</span></span><br><span class="line"><span class="selector-tag">font-variant</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line"><span class="selector-tag">font-variant</span>: <span class="selector-tag">initial</span>;</span><br><span class="line"><span class="selector-tag">font-variant</span>: <span class="selector-tag">unset</span>;</span><br></pre></td></tr></table></figure>
<h3 id="font-variation-settings"><a href="#font-variation-settings" class="headerlink" title="font-variation-settings"></a>font-variation-settings</h3><p>指定低级的 OpenType 或 TrueType 字体变体。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Use the default settings */</span></span><br><span class="line"><span class="selector-tag">font-variation-settings</span>: <span class="selector-tag">normal</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Set values for OpenType axis names */</span></span><br><span class="line"><span class="selector-tag">font-variation-settings</span>: "<span class="selector-tag">xhgt</span>" 0<span class="selector-class">.7</span>;</span><br></pre></td></tr></table></figure>
<h3 id="unicode-range"><a href="#unicode-range" class="headerlink" title="unicode-range"></a>unicode-range</h3><p>设置要使用的字符的特定范围</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* &lt;unicode-range&gt; values */</span></span><br><span class="line"><span class="selector-tag">unicode-range</span>: <span class="selector-tag">U</span>+26; <span class="comment">/* single codepoint */</span></span><br><span class="line"><span class="selector-tag">unicode-range</span>: <span class="selector-tag">U</span>+0<span class="selector-tag">-7F</span>;</span><br><span class="line"><span class="selector-tag">unicode-range</span>: <span class="selector-tag">U</span>+0025<span class="selector-tag">-00FF</span>; <span class="comment">/* codepoint range */</span></span><br><span class="line"><span class="selector-tag">unicode-range</span>: <span class="selector-tag">U</span>+4??; <span class="comment">/* wildcard range */</span></span><br><span class="line"><span class="selector-tag">unicode-range</span>: <span class="selector-tag">U</span>+0025<span class="selector-tag">-00FF</span>, <span class="selector-tag">U</span>+4??; <span class="comment">/* multiple values */</span></span><br></pre></td></tr></table></figure>
<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  [ font-family: &lt;family-name&gt;; ] ||</span><br><span class="line">  [ src: &lt;src&gt;; ] ||</span><br><span class="line">  [ unicode-range: &lt;unicode-range&gt;; ] ||</span><br><span class="line">  [ font-variant: &lt;font-variant&gt;; ] ||</span><br><span class="line">  [ font-feature-settings: &lt;font-feature-settings&gt;; ] ||</span><br><span class="line">  [ font-variation-settings: &lt;font-variation-settings&gt;; ] ||</span><br><span class="line">  [ font-stretch: &lt;font-stretch&gt;; ] ||</span><br><span class="line">  [ font-weight: &lt;font-weight&gt;; ] ||</span><br><span class="line">  <span class="selector-attr">[ font-style: &lt;font-style&gt;; ]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">where</span></span><br><span class="line">&lt;family-name&gt; = &lt;string&gt; | &lt;custom-ident&gt;+</span><br></pre></td></tr></table></figure>
<h2 id="字体格式"><a href="#字体格式" class="headerlink" title="字体格式"></a>字体格式</h2><p>对于 <code>@font-face</code> 而言，兼容性问题就是各浏览器所能识别的字体格式不尽相同。</p>
<h3 id="TrueType-格式-ttf"><a href="#TrueType-格式-ttf" class="headerlink" title="TrueType 格式(.ttf)"></a>TrueType 格式(.ttf)</h3><p>Windows 和 Mac 上常见的字体格式，是一种原始格式，因此它并没有为网页进行优化处理。<br>浏览器支持：IE9+,FireFox3.5+,Chrome4.0+,Safari3+,Opera10+,IOS Mobile Safari4.2+</p>
<h3 id="OpenType-格式-otf"><a href="#OpenType-格式-otf" class="headerlink" title="OpenType 格式(.otf)"></a>OpenType 格式(.otf)</h3><p>以 TrueType 为基础，也是一种原始格式，但提供更多的功能。<br>浏览器支持：FireFox3.5+,Chrome4.0+,Safari3.1+,Opera10.0+,IOS Mobile Safari4.2+</p>
<h3 id="Web-Open-Font-格式-woff"><a href="#Web-Open-Font-格式-woff" class="headerlink" title="Web Open Font 格式(.woff)"></a>Web Open Font 格式(.woff)</h3><p>针对网页进行特殊优化，因此是 Web 字体中最佳格式，它是一个开放的 TrueType/OpenType 的压缩版，同时支持元数据包的分离。<br>浏览器支持：IE9+, FireFox3.5+, Chrome6+, Safari3.6+,Opera11.1+</p>
<h3 id="Embedded-Open-Type-格式-eot"><a href="#Embedded-Open-Type-格式-eot" class="headerlink" title="Embedded Open Type 格式(.eot)"></a>Embedded Open Type 格式(.eot)</h3><p>IE 专用字体格式，可以从 TrueType 格式创建此格式字体。<br>浏览器支持：IE4+</p>
<h3 id="SVG-格式-svg"><a href="#SVG-格式-svg" class="headerlink" title="SVG 格式(.svg)"></a>SVG 格式(.svg)</h3><p>基于 SVG 字体渲染的格式。<br>浏览器支持：Chrome4+, Safari3.1+, Opera10.0+, IOS Mobile Safari3.2+</p>
<p>这就意味着在 <code>@font-face</code> 中我们至少需要 .woff, .eot 两种格式字体，甚至还需要 .svg 等字体达到更多种浏览版本的支持。</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face" target="_blank" rel="noopener">相关引用: @font-face</a><br><a href="https://www.sohu.com/a/162902209_464084" target="_blank" rel="noopener">相关引用: font-display</a><br><a href="https://segmentfault.com/a/1190000004179303" target="_blank" rel="noopener">相关引用: 字体格式</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack v4.14.0 实践</title>
    <url>/2018/06/23/webpack-tutorials-start/</url>
    <content><![CDATA[<p>之前使用 leaflet 开发地图相关功能时，采用最原始的 <code>&lt;script&gt;</code> 和 <code>&lt;link&gt;</code> 标签依次添加所有 JS 和 CSS 文件，随着文件的增多每次更改内容时都要修改对应的版本号，十分麻烦。之前基于 <code>create-react-app</code> 这个脚手架创建的项目每次都会把所有文件打包的一个文件中，当时只知道使用了 webpack（是一个现代 JavaScript 应用程序的静态模块打包器）实现，不知道如何从 0 到 1 使用 webpack 创建项目开发环境以及打包资源文件。由于之前并没有用过 webpack，所以本文直接根着<a href="https://webpack.docschina.org/guides/" target="_blank" rel="noopener">官方教程</a>，使用最新版本 v4.14.0 进行项目实践。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="依赖环境"><a href="#依赖环境" class="headerlink" title="依赖环境"></a>依赖环境</h3><ul>
<li>Node.js v8.9.0</li>
<li>Webpack v4.14.0</li>
</ul>
<h3 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir webpack-demo &amp;&amp; cd webpack-demo</span><br><span class="line">npm init -y</span><br><span class="line">npm install --save-dev webpack webpack-cli</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><p>可以根据以下目录结构创建项目。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── config</span><br><span class="line">│   └── webpack.config.js</span><br><span class="line">├── dist</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── public</span><br><span class="line">│   └── index.html</span><br><span class="line">└── src</span><br><span class="line">    └── index.js</span><br></pre></td></tr></table></figure>
<ul>
<li>config: webpack 的配置文件</li>
<li>dist: 打包后的文件以及资源</li>
<li>public: 一些公共文件</li>
<li>src: 项目主要源文件</li>
</ul>
<h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack 4<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../dist/main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">"lodash"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">component</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line"></span><br><span class="line">  element.innerHTML = _.join([<span class="string">"Hello"</span>, <span class="string">"webpack"</span>], <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(component());</span><br></pre></td></tr></table></figure>
<h3 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><ul>
<li>entry: 告诉 webpack 应该使用哪些模块，作为构建其内部依赖图的开始，webpack 会根据入口起点找出哪些模块和库是入口起点（直接和间接）的依赖。默认值是 <code>./src</code>。</li>
<li>output: 用于设置 webpack 根据 entry 创建的 bundles 输出位置（path），以及如何命名（filename）。输出位置默认值 <code>./dist</code>。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: path.resolve(__dirname, <span class="string">"../src/index.js"</span>),</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">"main.js"</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"../dist"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><ul>
<li>private 属性设置为 true，避免项目意外上传到 npm。</li>
<li>dependencies 中添加项目线上环境需要的依赖，<code>npm --save packagename</code>。</li>
<li>devDependencies 中添加开发环境中需要的依赖，<code>npm --save-dev packagename</code>。</li>
<li>scripts 中添加一些脚本，可以通过执行 <code>npm run build</code> 命令行执行 <code>build</code> 对应的操作 <code>webpack --config ./config/webpack.config.js</code>。</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"webpack-practice"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"lodash"</span>: <span class="string">"^4.17.10"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^4.14.0"</span>,</span><br><span class="line">    <span class="attr">"webpack-cli"</span>: <span class="string">"^3.0.8"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"webpack --config ./config/webpack.config.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"repository"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://gitee.com/noppt/webpack-practice.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第一次打包"><a href="#第一次打包" class="headerlink" title="第一次打包"></a>第一次打包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run build</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span> webpack-practice@1.0.0 build /Users/oeffect/webpack-practice</span><br><span class="line"><span class="meta">&gt;</span> webpack --config ./config/webpack.config.js</span><br><span class="line"></span><br><span class="line">Hash: 298173865a5e85e20b09</span><br><span class="line">Version: webpack 4.14.0</span><br><span class="line">Time: 334ms</span><br><span class="line">Built at: 2018-07-04 13:54:27</span><br><span class="line">  Asset      Size  Chunks             Chunk Names</span><br><span class="line">main.js  70.5 KiB       0  [emitted]  main</span><br><span class="line">[1] (webpack)/buildin/module.js 497 bytes &#123;0&#125; [built]</span><br><span class="line">[2] (webpack)/buildin/global.js 489 bytes &#123;0&#125; [built]</span><br><span class="line">[3] ./src/index.js 215 bytes &#123;0&#125; [built]</span><br><span class="line">    + 1 hidden module</span><br><span class="line"></span><br><span class="line">WARNING in configuration</span><br><span class="line">The 'mode' option has not been set, webpack will fallback to 'production' for this value. Set 'mode' option to 'development' or 'production' to enable defaults for each environment.</span><br><span class="line">You can also set it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/concepts/mode/</span><br></pre></td></tr></table></figure>
<p>然后打开 <code>./public/index.html</code> 可以看到对应的内容 <code>Hello webpack</code>。</p>
<h2 id="管理资源"><a href="#管理资源" class="headerlink" title="管理资源"></a>管理资源</h2><p>使用 <code>loader</code> 来预处理文件，打包静态资源如：CSS、图片、字体、数据等。</p>
<h3 id="加载-CSS"><a href="#加载-CSS" class="headerlink" title="加载 CSS"></a>加载 CSS</h3><p>需要添加 <a href="https://github.com/webpack-contrib/style-loader" target="_blank" rel="noopener">style-loader</a> 和 <a href="https://github.com/webpack-contrib/css-loader" target="_blank" rel="noopener">css-loader</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev style-loader css-loader</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: path.resolve(__dirname, <span class="string">"../src/index.js"</span>),</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">"main.js"</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"../dist"</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span></span><br><span class="line">        use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>注意在 <code>webpack.config.js</code> 中添加了 <code>module</code>。<code>rules</code> 对应的数组中添加需要用到的 <code>loader</code> 以及匹配规则， 数组中每一个对象中的 <code>test</code> 为匹配文件用到的正则表达式，如果匹配成功，就会使用 <code>use</code> 中对应的 <code>loader</code> 处理文件。</p>
<p>如果需要配置 loader 可以使用下面这种写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">use: [</span><br><span class="line">  &#123; <span class="attr">loader</span>: <span class="string">"style-loader"</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    loader: <span class="string">"css-loader"</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      modules: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>然后在 <code>src</code> 目录下增加 <code>style.css</code> 文件</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hello</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并在 <code>index.html</code> 中引用 <code>style.css</code>，并配置对应的样式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./style.css'</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">element.classList.add(<span class="string">'hello'</span>);</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>重新执行 <code>npm run build</code> 后打开 <code>index.html</code>，字体的颜色就变成红色了，此时的资源输出文件仍然是 <code>main.js</code>，即 <code>css</code> 也打包到 <code>main.js</code> 文件中了。</p>
<p>类似的 less 和 sass 都能找到对应的 loader，如 <a href="https://github.com/postcss/postcss-loader" target="_blank" rel="noopener">postcss-loader</a>、<a href="https://github.com/webpack-contrib/sass-loader" target="_blank" rel="noopener">sass-loader</a>、<a href="https://github.com/webpack-contrib/less-loader" target="_blank" rel="noopener">less-loader</a>等，根据需要添加。</p>
<h3 id="加载图片和字体资源"><a href="#加载图片和字体资源" class="headerlink" title=" 加载图片和字体资源"></a> 加载图片和字体资源</h3><p>使用 <a href="https://github.com/webpack-contrib/file-loader" target="_blank" rel="noopener">file-loader</a> 可以处理图片和文字资源。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev file-loader</span><br></pre></td></tr></table></figure>
<p>然后在 <code>webpack.config.js</code> 文件的 <code>module.rules</code> 中添加以下配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">  use: [<span class="string">"file-loader"</span>]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(woff|woff2|eot|ttf|otf)$/</span>,</span><br><span class="line">  use: [<span class="string">"file-loader"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于现在 <code>index.html</code> 位置为 <code>public</code> 文件夹下，而资源输出为 <code>dist</code> 文件夹下，所以需要设置资源的 <code>publicPath</code> 防止在 <code>index.html</code> 中找不到对应的资源文件。可以通过设置 <code>file-loader</code> 的 <code>options.publicPath</code> 或者设置 <code>output.publicPath</code> 为 <code>../dist/</code> 来解决。</p>
<p>之后我们在项目中引用自己添加的图片以及字体文件就可以打包输出到 <code>dist</code> 文件夹中了。</p>
<p>除了上面的 CSS、图片、字体，如果需要处理其他类型资源，<a href="https://webpack.docschina.org/loaders/" target="_blank" rel="noopener">在这里选择 loader</a>，然后根据文档配置 <code>module.rules</code> 规则就可以了。</p>
<h2 id="管理输出"><a href="#管理输出" class="headerlink" title="管理输出"></a>管理输出</h2><p>上面的打包已经满足基本情况，但是当项目文件越来越多后，把所有的 JS、CSS 文件打包在同一个文件中则每次更新内容都要重新加载整个包，无法使用缓存，导致加载速度慢，如果输出包过大，则需要合理的划分模块以及分离 CSS，并且压缩代码文件。还有如果资源变更则需要删除原打包文件，否则会导致 <code>dist</code> 文件夹混乱难以管理。需要解决的有以下几点问题：</p>
<ul>
<li>设置 mode</li>
<li>多输出文件</li>
<li>分离 CSS</li>
<li>HTML 文件</li>
<li>清空原打包文件</li>
<li>代码压缩</li>
</ul>
<h3 id="设置-mode"><a href="#设置-mode" class="headerlink" title="设置 mode"></a>设置 mode</h3><p>第一次打包时，控制台打印了一条警告信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WARNING in configuration</span><br><span class="line">The &apos;mode&apos; option has not been set, webpack will fallback to &apos;production&apos; for this value. Set &apos;mode&apos; option to &apos;development&apos; or &apos;production&apos; to enable defaults for each environment.</span><br><span class="line">You can also set it to &apos;none&apos; to disable any default behavior. Learn more: https://webpack.js.org/concepts/mode/</span><br></pre></td></tr></table></figure>
<p>需要在 <code>webpack.config.js</code> 中增加 <code>mode</code> 参数: <code>production</code> 或 <code>development</code>。</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>development</code></td>
<td>会将 <code>process.env.NODE_ENV</code> 的值设为 <code>development</code>。启用 <code>NamedChunksPlugin</code> 和 <code>NamedModulesPlugin</code>。</td>
</tr>
<tr>
<td><code>production</code></td>
<td>会将 <code>process.env.NODE_ENV</code> 的值设为 <code>production</code>。启用 <code>FlagDependencyUsagePlugin</code>, <code>FlagIncludedChunksPlugin</code>, <code>ModuleConcatenationPlugin</code>, <code>NoEmitOnErrorsPlugin</code>, <code>OccurrenceOrderPlugin</code>, <code>SideEffectsFlagPlugin</code> 和 <code>UglifyJsPlugin</code></td>
</tr>
</tbody>
</table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者修改脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">"build": "webpack --config ./config/webpack.config.js --mode=production"</span><br></pre></td></tr></table></figure>
<h3 id="多输出文件"><a href="#多输出文件" class="headerlink" title="多输出文件"></a>多输出文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">  app: path.resolve(__dirname, <span class="string">"../src/index.js"</span>),</span><br><span class="line">  print: path.resolve(__dirname, <span class="string">"../src/print.js"</span>)</span><br><span class="line">&#125;,</span><br><span class="line">output: &#123;</span><br><span class="line">  filename: <span class="string">'[name].[hash].js'</span>,</span><br><span class="line">  publicPath: <span class="string">"../dist/"</span>,</span><br><span class="line">  path: path.resolve(__dirname, <span class="string">"../dist"</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>打包后的文件输出格式类似下面:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                        Asset      Size  Chunks             Chunk Names</span><br><span class="line">print.391eb52370f2a88b31f4.js  1.03 KiB       0  [emitted]  print</span><br><span class="line">  app.391eb52370f2a88b31f4.js  77.1 KiB    1, 0  [emitted]  app</span><br></pre></td></tr></table></figure>
<h3 id="分离-CSS"><a href="#分离-CSS" class="headerlink" title="分离 CSS"></a>分离 CSS</h3><p><a href="https://github.com/webpack-contrib/mini-css-extract-plugin" target="_blank" rel="noopener">mini-css-extract-plugin</a> 插件可以将 CSS 文件分离到单独的文件中。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev mini-css-extract-plugin</span><br></pre></td></tr></table></figure>
<p>配置 <code>webpack.config.js</code> 文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">"mini-css-extract-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"css-loader"</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              minimize: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">"[name].[hash].css"</span>,</span><br><span class="line">      chunkFilename: <span class="string">"[id].[hash].css"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="HTML-文件"><a href="#HTML-文件" class="headerlink" title="HTML 文件"></a>HTML 文件</h3><p>使用 <a href="https://github.com/jantimon/html-webpack-plugin" target="_blank" rel="noopener">HtmlWebpackPlugin</a> 插件可以生成 HTML 文件到输出文件夹，并自动引用打包后的 JS 和 CSS 文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure>
<p>配置 <code>webpack.config.js</code> 文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">  ...,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    inject: <span class="literal">true</span>,</span><br><span class="line">    template: path.resolve(__dirname, <span class="string">"../public/index.html"</span>)</span><br><span class="line">  &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="清空原打包文件"><a href="#清空原打包文件" class="headerlink" title="清空原打包文件"></a>清空原打包文件</h3><p>使用 <a href="https://github.com/johnagan/clean-webpack-plugin" target="_blank" rel="noopener">CleanWebpackPlugin</a> 插件用于删除原有输出文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev clean-webpack-plugin</span><br></pre></td></tr></table></figure>
<p>配置 <code>webpack.config.js</code> 文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">"clean-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">"*"</span>], &#123;</span><br><span class="line">    root: path.resolve(__dirname, <span class="string">"../dist"</span>)</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  ...,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="代码压缩"><a href="#代码压缩" class="headerlink" title="代码压缩"></a>代码压缩</h3><ul>
<li>设置 <code>css-loader</code> 的 <code>options.minimize</code> 值为 <code>true</code> 用于压缩 css 代码。</li>
<li>设置 <code>mode</code> 值为 <code>production</code>，默认启用 JS 文件压缩。</li>
</ul>
<h2 id="开发模式"><a href="#开发模式" class="headerlink" title="开发模式"></a>开发模式</h2><p>新创建一个 <code>webpack</code> 的配置文件 <code>webpack.config.dev.js</code> 并把原 <code>webpack.config.js</code> 的内容复制到新文件。</p>
<h3 id="追溯错误"><a href="#追溯错误" class="headerlink" title="追溯错误"></a>追溯错误</h3><p>JS 提供了 <a href="http://blog.teamtreehouse.com/introduction-source-maps" target="_blank" rel="noopener">source map</a> 功能，将编译后的代码映射回原始源代码。</p>
<p>配置 <code>webpack.config.dev.js</code> 的 <a href="https://webpack.docschina.org/configuration/devtool" target="_blank" rel="noopener">devtool</a>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">"development"</span>,</span><br><span class="line">  devtool: <span class="string">'inline-source-map'</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样在浏览器控制台输出的错误就能找到出错文件的位置。</p>
<h3 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h3><p>之前每次查看项目都要运行 <code>npm run build</code> 命令行编译代码，然后刷新页面，十分麻烦。在开发环境时，使用 <a href="https://github.com/webpack/webpack-dev-server" target="_blank" rel="noopener">webpack-dev-server</a> 解决实时编译和重新加载的问题。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure>
<p>配置 <code>webpack.config.dev.js</code> 文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    inline: <span class="literal">true</span>,</span><br><span class="line">    open: <span class="literal">true</span>, <span class="comment">//自动打开页面,</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>package.json</code> 中添加 scripts</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  "start": "webpack-dev-server --open --config ./config/webpack.config.dev.js"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>然后调用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure>
<p>开启服务器，会自动打开 <code>http://localhost:8081/</code> 页面。</p>
<h3 id="模块热替换"><a href="#模块热替换" class="headerlink" title="模块热替换"></a>模块热替换</h3><p>模块热替换(Hot Module Replacement 或 HMR)是 webpack 提供的最有用的功能之一。它允许在运行时更新各种模块，而无需进行完全刷新。主要是通过以下几种方式，来显著加快开发速度：</p>
<ul>
<li>保留在完全重新加载页面时丢失的应用程序状态。</li>
<li>只更新变更内容，以节省宝贵的开发时间。</li>
<li>调整样式更加快速 - 几乎相当于在浏览器调试器中更改样式。</li>
</ul>
<p>配置 <code>webpack.config.dev.js</code> 文件，devServer 中增加 <code>hot</code> 为 true 就可以启动热更新模式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    hot: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/postcss/postcss-loader" target="_blank" rel="noopener">常用 Loaders</a><br><a href="https://webpack.docschina.org/plugins/" target="_blank" rel="noopener">常用 Plugins</a></p>
<p>到目前为止已经可以基于这些配置进行日常简单的项目开发工作了。教程中还有一些进阶的用法，比如缓存、代码分离等等，由于目前并没有用到的场景，所以本篇不继续实践这些内容，等之后有空再仔细研究。</p>
]]></content>
      <categories>
        <category>Webpack</category>
      </categories>
      <tags>
        <tag>部署</tag>
        <tag>webpack</tag>
        <tag>CLI</tag>
      </tags>
  </entry>
  <entry>
    <title>Leaflet 学习系列（四）如何写插件理论篇</title>
    <url>/2018/06/05/gis-leaflet-tutorials-extends/</url>
    <content><![CDATA[<p>本篇主要介绍 Leaflet 开发自定义插件的一些理论知识，在日常开发中，仅仅使用 Leaflet 提供的类虽然能满足一些基本需求，但是在一些功能点的实现上需要我们自己写插件来实现功能。如<a href="/2018/06/02/gis-leaflet-ui-vector-layers/">上文</a>中为了实现点聚合的效果，我们就使用了三方插件，目前 Leaflet <a href="https://leafletjs.com/plugins.html" target="_blank" rel="noopener">相关的三方插件</a>已经基本满足大部分需求，如果你有一些需求不知道怎么实现，可以先从<a href="https://leafletjs.com/plugins.html" target="_blank" rel="noopener">这里</a>找一找，如果没有找到的合适的话，然后再自己实现插件。所谓插件即对一些功能的封装，比如之前 TileLayer 我们通过传入不同的参数，来实现加载不同的地图，如果通过扩展 Leaflet 提供的 TileLayer 类，把这些参数定义在子类内部，然后当做一个独立类导出，这样在其他人使用时就无需关心内部逻辑，极大降低了使用难度，同时也避免了大量冗余代码。为 Leaflet 编写插件需要以下基础知识：</p>
<ul>
<li>JavaScript</li>
<li>DOM 操作</li>
<li>面向对象编程思想</li>
<li>熟悉 Leaflet 原有类</li>
</ul>
<a id="more"></a>
<p>首先理论篇和实践篇主要翻译自以下三篇官方教程，当然翻译过程中加入了一些自己的理解，对于英文水平较好且对 Leaflet 已经有一定实践经验的还是建议阅读官方文档和教程。</p>
<ul>
<li><a href="https://leafletjs.com/examples/extending/extending-1-classes.html" target="_blank" rel="noopener">Extending Leaflet: Class Theory</a></li>
<li><a href="https://leafletjs.com/examples/extending/extending-2-layers.html" target="_blank" rel="noopener">Extending Leaflet: Layers</a></li>
<li><a href="https://leafletjs.com/examples/extending/extending-3-controls.html" target="_blank" rel="noopener">Extending Leaflet: Handlers and Controls</a></li>
</ul>
<h2 id="Leaflet-结构"><a href="#Leaflet-结构" class="headerlink" title="Leaflet 结构"></a>Leaflet 结构</h2><p>首先来熟悉下 Leaflet 的结构，只有熟悉了 Leaflet 都有哪些类，才能在编写插件时得心应手，知道要扩展那个类，或者哪些类一起使用能实现需求。</p>
<p><img src="http://qiniu.0x0803.top/leaflet/8.png_blog" alt></p>
<p><a href="https://leafletjs.com/examples/extending/class-diagram.html" target="_blank" rel="noopener">在线查看</a></p>
<p>Leaflet 有以下几种扩展方式：</p>
<ul>
<li>最常用的方式：使用 <code>L.Class.extend()</code> 创建 <code>L.Layer</code>, <code>L.Handler</code> 或者 <code>L.Control</code> 的子类实现几种需求<ul>
<li>地图移动的同时移动图层</li>
<li>浏览器事件</li>
<li>地图上的控件元素</li>
</ul>
</li>
<li>使用 <code>L.Class.include()</code> 为 <code>Class</code> 添加功能<ul>
<li>添加新的 <code>methods</code> 和 <code>options</code></li>
<li>修改一些 <code>methods</code></li>
<li>使用 <code>addInitHook</code> 执行额外的构造函数代码</li>
</ul>
</li>
<li>使用 <code>L.Class.include()</code> 更改现有 <code>Class</code> 的部分</li>
</ul>
<h2 id="L-Class"><a href="#L-Class" class="headerlink" title="L.Class"></a>L.Class</h2><p>我们知道在 ECMAScript 只支持<code>实现继承</code>，而且其实现继承主要是依靠原型链，其优缺点以及实现的方式就不一一介绍了。Leaflet 中的 <code>L.Class</code> 提供了 <code>extend()</code>、<code>include()</code>、<code>initialize()</code> 方法，可以方便实现类的继承。</p>
<h3 id="L-Class-extend"><a href="#L-Class-extend" class="headerlink" title="L.Class.extend()"></a>L.Class.extend()</h3><p>使用 <code>.extend()</code> 方法创建 Leaflet 中类的子类，方法可传入一个包含键值对的普通对象，对应的 <code>key</code> 就是子类的属性名或者方法名，<code>key</code> 对应的 <code>value</code> 就是其默认值或者方法的实现。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> MyDemoClass = L.Class.extend(&#123;</span><br><span class="line">    <span class="comment">// A property with initial value = 42</span></span><br><span class="line">    myDemoProperty: <span class="number">42</span>,   </span><br><span class="line">    <span class="comment">// A method </span></span><br><span class="line">    myDemoMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.myDemoProperty; &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myDemoInstance = <span class="keyword">new</span> MyDemoClass();</span><br><span class="line"><span class="comment">// This will output "42" to the development console</span></span><br><span class="line"><span class="built_in">console</span>.log( myDemoInstance.myDemoMethod() );</span><br></pre></td></tr></table></figure>
<p>命名 classes, methods 和 properties 时建议遵循以下建议：</p>
<ul>
<li>函数，方法，属性和工厂命名应该使用小驼峰法 lowerCamelCase</li>
<li>类名应该使用大驼峰法 UpperCamelCase</li>
<li>私有属性和方法建议使用下划线 <code>_</code> 开头。对于 JavaScript 来说所有方法和属性都能被访问，增加下划线前缀只是让我们容易区分属性和方法的状态。</li>
</ul>
<h3 id="L-Class-include"><a href="#L-Class-include" class="headerlink" title="L.Class.include()"></a>L.Class.include()</h3><p>使用 <code>.include()</code> 可以为一个已经定义的类重新定义属性、方法或者添加新的属性和方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">MyDemoClass.include(&#123;</span><br><span class="line">    <span class="comment">// Adding a new property to the class</span></span><br><span class="line">    _myPrivateProperty: <span class="number">78</span>,</span><br><span class="line">    <span class="comment">// Redefining a method</span></span><br><span class="line">    myDemoMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>._myPrivateProperty; &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mySecondDemoInstance = <span class="keyword">new</span> MyDemoClass();</span><br><span class="line"><span class="comment">// This will output "78"</span></span><br><span class="line"><span class="built_in">console</span>.log( mySecondDemoInstance.myDemoMethod() );</span><br><span class="line"><span class="comment">// However, properties and methods from before still exist</span></span><br><span class="line"><span class="comment">// This will output "42"</span></span><br><span class="line"><span class="built_in">console</span>.log( mySecondDemoInstance.myDemoProperty );</span><br></pre></td></tr></table></figure>
<h3 id="L-Class-initialize"><a href="#L-Class-initialize" class="headerlink" title="L.Class.initialize()"></a>L.Class.initialize()</h3><p>Leaflet 中的类，构造函数的方法命名为 <code>initialize</code>。我们可以在构造函数中处理自定义类和原始 <code>options</code> 的合并操作以及其他初始化操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> MyBoxClass = L.Class.extend(&#123;</span><br><span class="line">    options: &#123;</span><br><span class="line">        width: <span class="number">1</span>,</span><br><span class="line">        height: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    initialize: <span class="function"><span class="keyword">function</span>(<span class="params">name, options</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        L.setOptions(<span class="keyword">this</span>, options);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> MyBoxClass(<span class="string">'Red'</span>, &#123;<span class="attr">width</span>: <span class="number">10</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(instance.name); <span class="comment">// Outputs "Red"</span></span><br><span class="line"><span class="built_in">console</span>.log(instance.options.width); <span class="comment">// Outputs "10"</span></span><br><span class="line"><span class="built_in">console</span>.log(instance.options.height); <span class="comment">// Outputs "1", the default</span></span><br></pre></td></tr></table></figure>
<p>子类会继承父类中的 <code>options</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> MyCubeClass = MyBoxClass.extend(&#123;</span><br><span class="line">    options: &#123;</span><br><span class="line">        depth: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> MyCubeClass(<span class="string">'Blue'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(instance.options.width); <span class="comment">// Outputs "1", parent class default</span></span><br><span class="line"><span class="built_in">console</span>.log(instance.options.height); <span class="comment">// Outputs "1", parent class default</span></span><br><span class="line"><span class="built_in">console</span>.log(instance.options.depth); <span class="comment">// Outputs "1"</span></span><br></pre></td></tr></table></figure>
<p>我们经常会有这种需求，先执行父类的构造函数，然后在执行子类的构造函数。此时可以使用 <code>L.Class.addInitHook()</code> 实现。在 <code>initialize</code> 函数执行之后会触发钩子执行该方法，此时 <code>this.options</code> 已存在且可被访问。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">MyBoxClass.addInitHook(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._area = <span class="keyword">this</span>.options.width * <span class="keyword">this</span>.options.length;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>或者下面这种写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">MyCubeClass.include(&#123;</span><br><span class="line">    _calculateVolume: <span class="function"><span class="keyword">function</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>._volume = <span class="keyword">this</span>.options.width * <span class="keyword">this</span>.options.length * <span class="keyword">this</span>.options.depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">MyCubeClass.addInitHook(<span class="string">'_calculateVolume'</span>, argValue1, argValue2);</span><br></pre></td></tr></table></figure>
<h3 id="父类方法"><a href="#父类方法" class="headerlink" title="父类方法"></a>父类方法</h3><p>使用 <code>Funcation.call(...)</code> 调用父类的方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">L.FeatureGroup = L.LayerGroup.extend(&#123;</span><br><span class="line"></span><br><span class="line">    addLayer: <span class="function"><span class="keyword">function</span> (<span class="params">layer</span>) </span>&#123;</span><br><span class="line">        …</span><br><span class="line">        L.LayerGroup.prototype.addLayer.call(<span class="keyword">this</span>, layer);</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    removeLayer: <span class="function"><span class="keyword">function</span> (<span class="params">layer</span>) </span>&#123;</span><br><span class="line">        …</span><br><span class="line">        L.LayerGroup.prototype.removeLayer.call(<span class="keyword">this</span>, layer);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    …</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>调用父类的构造函数 <code>ParentClass.prototype.initialize.call(this, …)</code></p>
<h3 id="工厂函数"><a href="#工厂函数" class="headerlink" title="工厂函数"></a>工厂函数</h3><p>大多数 Leaflet 中的类都有一个相应的工厂函数，函数名同类名相同，不过命名由大写驼峰改为了小写驼峰。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myBoxClass</span>(<span class="params">name, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyBoxClass(name, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h3><p>在为插件命名时，建议遵循以下约定：</p>
<ul>
<li>不在插件中暴露全局变量</li>
<li>如果有一个新的类，直接放在 L 命名空间下 (L.MyPlugin)</li>
<li>如果继承自一个已经存在的类，将其设置为子属性 (L.TileLayer.BaiduLayer)</li>
</ul>
]]></content>
      <categories>
        <category>GIS</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Leaflet</tag>
        <tag>自定义组件</tag>
      </tags>
  </entry>
  <entry>
    <title>Leaflet 学习系列（三）标记以及矢量图</title>
    <url>/2018/06/02/gis-leaflet-ui-vector-layers/</url>
    <content><![CDATA[<p><a href="/2018/05/27/gis-leaflet-tutorials-map-layer/">上文</a>介绍了如何使用 Leaflet 加载地图，实际使用时我们不仅仅只加载地图，更多的会在地图上添加一些标记，结合聚合渲染等可视化效果，更清晰的呈现标记点的分布态势（比如添加银行网点的位置信息，附近的商圈信息等等）。也可以添加一些矢量图并设置不同的样式以及属性来区分不同的业务片区，更加直观的服务于业务（比如添加不同物流站点的配送信息以及站点的配送区域等等）。这些功能的实现则需要使用到 Leaflet 提供的 UI Layers 和 Vector Layers。</p>
<p>UI Layers 中提供的类有：</p>
<ul>
<li><a href="https://leafletjs.com/reference-1.0.3.html#marker" target="_blank" rel="noopener">Marker</a> 用于在地图上添加可点击和移动的图标</li>
<li><a href="https://leafletjs.com/reference-1.0.3.html#popup" target="_blank" rel="noopener">Popup</a> 用于在地图的某个点打开弹出窗口</li>
<li><a href="https://leafletjs.com/reference-1.0.3.html#tooltip" target="_blank" rel="noopener">Tooltip</a> 用于在地图的某个点显示少量文字</li>
</ul>
<a id="more"></a>
<p>Vector Layers 中常用的类有：</p>
<ul>
<li><a href="https://leafletjs.com/reference-1.0.3.html#polyline" target="_blank" rel="noopener">Polyline</a> 用于在地图上绘制折线</li>
<li><a href="https://leafletjs.com/reference-1.0.3.html#polygon" target="_blank" rel="noopener">Polygon</a> 用于在地图上绘制多边形</li>
<li><a href="https://leafletjs.com/reference-1.0.3.html#circle" target="_blank" rel="noopener">Circle</a> 用于在地图上绘制圆</li>
</ul>
<p>接下来我们就使用这些类来实现一些简单的功能。</p>
<h2 id="Marker"><a href="#Marker" class="headerlink" title="Marker"></a>Marker</h2><h3 id="初始化方法"><a href="#初始化方法" class="headerlink" title="初始化方法"></a>初始化方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">L.marker(&lt;LatLng&gt; latlng, &lt;Marker options&gt; options?)</span><br><span class="line"></span><br><span class="line">// 更多 options 可选属性，以及默认值</span><br><span class="line">L.marker(latlng, &#123;</span><br><span class="line">    icon: L.Icon.Default, // 默认值为 L.Icon.Default，可使用 L.icon() 自定义图标</span><br><span class="line">    draggable: false, // 设置为 true 可鼠标点击后拖动</span><br><span class="line">    keyboard: true, // 是否可以在点击标记后，按键盘按键制表，即在标记周围显示选中框</span><br><span class="line">    title: '', // 鼠标悬停在标记上是浏览器工具提示的文本</span><br><span class="line">    alt: '', // 图标图像的 alt 属性文本</span><br><span class="line">    zIndexOffset: 0, // 默认情况下根据经纬度自动显示标记的层级，设置的值越高，则显示在比其值低的标记上面</span><br><span class="line">    opacity: 1.0, // 透明度</span><br><span class="line">    riseOnHover: false, // 设置为 true 时在鼠标在移动到标记上时自动显示在最顶层</span><br><span class="line">    riseOffset: 250, // riseOnHover 对应的 z-index 偏移量</span><br><span class="line">    pane: 'markerPane', // 标记将添加到 map 对应的 pane 上</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>基本使用例子，调用初始化方法，并设置其经纬度，然后添加到地图上。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> marker = L.marker([<span class="number">31.23037</span>, <span class="number">121.4737</span>]).addTo(mymap);</span><br></pre></td></tr></table></figure>
<h3 id="自定义标记"><a href="#自定义标记" class="headerlink" title="自定义标记"></a>自定义标记</h3><p>如果想要自定义标记显示的样式，可以设置 options 中的 icon 属性为自定义图标 <a href="https://leafletjs.com/reference-1.0.3.html#icon" target="_blank" rel="noopener">L.Icon</a>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> icon = L.icon(&#123;</span><br><span class="line">  iconUrl: <span class="string">"./images/apple-touch-icon-next.png"</span>,</span><br><span class="line">  iconSize: [<span class="number">60</span>, <span class="number">60</span>],</span><br><span class="line">  iconAnchor: [<span class="number">30</span>, <span class="number">30</span>]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> customMarker = L.marker([<span class="number">31.23037</span>, <span class="number">121.4837</span>], &#123;</span><br><span class="line">  icon</span><br><span class="line">&#125;).addTo(mymap);</span><br></pre></td></tr></table></figure>
<h2 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h2><p>一个抽象类，虽然我们不会直接使用 <a href="https://leafletjs.com/reference-1.0.3.html#path" target="_blank" rel="noopener">Path</a>，但它包含矢量图（多边形、折线、圆）之间共用的 <code>options</code> 和 <code>constants</code>。所以我们需要知道这些常用选项有哪些，方便自定义矢量图的样式。</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>类型</th>
<th>默认值</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>stroke</td>
<td>Boolean</td>
<td>true</td>
<td>是否绘制路径描边，设置为 false 禁用多边形和圆的边框</td>
</tr>
<tr>
<td>color</td>
<td>String</td>
<td>‘#3388ff’</td>
<td>描边颜色</td>
</tr>
<tr>
<td>weight</td>
<td>Number</td>
<td>3</td>
<td>描边的宽度，单位像素 px</td>
</tr>
<tr>
<td>opacity</td>
<td>Number</td>
<td>1.0</td>
<td>描边的透明度</td>
</tr>
<tr>
<td>lineCap</td>
<td>String</td>
<td>‘round’</td>
<td>路径线结束处的样式</td>
</tr>
<tr>
<td>lineJoin</td>
<td>String</td>
<td>‘round’</td>
<td>两条路径线相交处的样式</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>方法</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>setStyle(<path options> style)</path></td>
<td>更改路径的外观</td>
</tr>
</tbody>
</table>
<p><a href="https://leafletjs.com/reference-1.0.3.html#path" target="_blank" rel="noopener">更多选项和方法</a></p>
<h2 id="Polyline"><a href="#Polyline" class="headerlink" title="Polyline"></a>Polyline</h2><p>扩展 Path 类用于绘制线。</p>
<h3 id="初始化方法-1"><a href="#初始化方法-1" class="headerlink" title="初始化方法"></a>初始化方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">L.polyline(&lt;LatLng[]&gt; latlngs, &lt;Polyline options&gt; options?)</span><br></pre></td></tr></table></figure>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><table>
<thead>
<tr>
<th>方法</th>
<th>返回值</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>toGeoJSON()</td>
<td>Object</td>
<td>返回 GeoJSON 类型数据</td>
</tr>
<tr>
<td>isEmpty()</td>
<td>Boolean</td>
<td>返回该折线是否有经纬度信息</td>
</tr>
<tr>
<td>addLatLng(<latlng> latlng)</latlng></td>
<td>this</td>
<td>在折线上增加到该点的路径</td>
</tr>
<tr>
<td>getLatLngs()</td>
<td>LatLng[]</td>
<td>返回折线上点的信息</td>
</tr>
<tr>
<td>setLatLngs(&lt;LatLng[]&gt; latlngs)</td>
<td>this</td>
<td>重置折线所有点</td>
</tr>
<tr>
<td>getCenter()</td>
<td>LatLng</td>
<td>返回该线的中心点</td>
</tr>
</tbody>
</table>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> latlngs = [</span><br><span class="line">  [<span class="number">31.23337</span>, <span class="number">121.4737</span>],</span><br><span class="line">  [<span class="number">31.23437</span>, <span class="number">121.4747</span>],</span><br><span class="line">  [<span class="number">31.23537</span>, <span class="number">121.4727</span>]</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> polyline = L.polyline(latlngs, &#123; <span class="attr">color</span>: <span class="string">"red"</span> &#125;).addTo(mymap);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> polylineCenter = polyline.getCenter();</span><br></pre></td></tr></table></figure>
<h2 id="Polygon"><a href="#Polygon" class="headerlink" title="Polygon"></a>Polygon</h2><p>扩展 Polyline 类，用于绘制多边形，在创建多边形时传入的点中最后一个点不应该等于第一个点。</p>
<h3 id="初始化方法-2"><a href="#初始化方法-2" class="headerlink" title="初始化方法"></a>初始化方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">L.polygon(&lt;LatLng[]&gt; latlngs, &lt;Polyline options&gt; options?)</span><br></pre></td></tr></table></figure>
<h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> latlngs = [</span><br><span class="line">  [<span class="number">31.23437</span>, <span class="number">121.4757</span>],</span><br><span class="line">  [<span class="number">31.23537</span>, <span class="number">121.4757</span>],</span><br><span class="line">  [<span class="number">31.23637</span>, <span class="number">121.4747</span>],</span><br><span class="line">  [<span class="number">31.23737</span>, <span class="number">121.4787</span>]</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> polygon = L.polygon(latlngs, &#123; <span class="attr">color</span>: <span class="string">"blue"</span> &#125;).addTo(mymap);</span><br></pre></td></tr></table></figure>
<h2 id="Circle"><a href="#Circle" class="headerlink" title="Circle"></a>Circle</h2><h3 id="初始化方法-3"><a href="#初始化方法-3" class="headerlink" title="初始化方法"></a>初始化方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">L.circle(&lt;LatLng&gt; latlng, &lt;Circle options&gt; options?)</span><br><span class="line"></span><br><span class="line">// options </span><br><span class="line">&#123;</span><br><span class="line">    radius: Number // 圆的半径，单位米，必须</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><table>
<thead>
<tr>
<th>方法</th>
<th>返回值</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>setRadius(<number> radius)</number></td>
<td>this</td>
<td>设置圆的半径</td>
</tr>
<tr>
<td>getRadius()</td>
<td>Number</td>
<td>获取圆的半径</td>
</tr>
<tr>
<td>getBounds()</td>
<td>LatLngBounds</td>
<td>返回圆在地图上显示的地理区域</td>
</tr>
</tbody>
</table>
<h3 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> circle = L.circle([<span class="number">31.22537</span>, <span class="number">121.4727</span>], &#123;</span><br><span class="line">  radius: <span class="number">400</span>,</span><br><span class="line">  color: <span class="string">"#2af"</span></span><br><span class="line">&#125;).addTo(mymap);</span><br></pre></td></tr></table></figure>
<h2 id="Popup"><a href="#Popup" class="headerlink" title="Popup"></a>Popup</h2><p>用于在地图的某些地方打开弹出窗口。</p>
<h3 id="初始化方法-4"><a href="#初始化方法-4" class="headerlink" title="初始化方法"></a>初始化方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">L.popup(&lt;Popup options&gt; options?, &lt;Layer&gt; source?)</span><br></pre></td></tr></table></figure>
<h3 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h3><table>
<thead>
<tr>
<th>方法</th>
<th>返回值</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>setLatLng(<latlng> latlng)</latlng></td>
<td>this</td>
<td>设置popup在某点上打开</td>
</tr>
<tr>
<td>setContent(htmlContent)</td>
<td>this</td>
<td>设置弹框的内容</td>
</tr>
<tr>
<td>openOn(<map> map)</map></td>
<td>this</td>
<td>在地图上打开弹框并关闭上一个显示的弹框</td>
</tr>
<tr>
<td>openPopup(<latlng> latlng?)</latlng></td>
<td>this</td>
<td>打开弹框</td>
</tr>
<tr>
<td>closePopup()</td>
<td>this</td>
<td>关闭弹框</td>
</tr>
<tr>
<td>bindPopup(content, <popup options> options?)</popup></td>
<td>this</td>
<td>绑定弹框到某图层对象</td>
</tr>
<tr>
<td>unbindPopup()</td>
<td>this</td>
<td>解绑</td>
</tr>
</tbody>
</table>
<h3 id="使用-4"><a href="#使用-4" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> popup = L.popup()</span><br><span class="line">  .setLatLng([<span class="number">31.23037</span>, <span class="number">121.4637</span>])</span><br><span class="line">  .setContent(<span class="string">"&lt;p&gt;Hello world!&lt;br /&gt;This is a nice popup.&lt;/p&gt;"</span>)</span><br><span class="line">  .openOn(mymap);</span><br></pre></td></tr></table></figure>
<h2 id="Tooltip"><a href="#Tooltip" class="headerlink" title="Tooltip"></a>Tooltip</h2><p>用于在地图的某个点显示少量文字</p>
<h3 id="初始化方法-5"><a href="#初始化方法-5" class="headerlink" title="初始化方法"></a>初始化方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">L.tooltip(&lt;Tooltip options&gt; options?, &lt;Layer&gt; source?)</span><br></pre></td></tr></table></figure>
<h3 id="使用-5"><a href="#使用-5" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">marker.bindTooltip(<span class="string">"my tooltip text"</span>).openTooltip();</span><br></pre></td></tr></table></figure>
<p>上述代码添加后的效果如图所示：</p>
<p><img src="http://qiniu.0x0803.top/leaflet/7.png_blog" alt></p>
<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>上述只是介绍了这些类的基本使用方法，正如文章开头所述，标记往往需要结合聚合渲染等可视化效果来呈现标记点的分布态势。而矢量图也需要我们手动去设置区域的关键点信息的话又不是很方便，所以希望能够在地图上画出不同的区域。接下来就看下如果实现矢量图的绘制编辑，以及点聚合的效果。</p>
<h3 id="绘制编辑"><a href="#绘制编辑" class="headerlink" title="绘制编辑"></a>绘制编辑</h3><p>首先我们需要了解几个插件，分别是 <a href="https://github.com/Leaflet/Leaflet.draw" target="_blank" rel="noopener">Leaflet.draw</a>、<a href="https://github.com/Leaflet/Leaflet.Editable" target="_blank" rel="noopener">Leaflet.Editable</a>、<a href="https://github.com/makinacorpus/Leaflet.GeometryUtil" target="_blank" rel="noopener">Leaflet.GeometryUtil</a> 和 <a href="https://github.com/makinacorpus/Leaflet.Snap" target="_blank" rel="noopener">Leaflet.Snap</a>。其中 Leaflet.draw、Leaflet.Editable 都提供了矢量图的绘制以及编辑功能，Leaflet.draw 同时提供了一些 UI 控件，而 Leaflet.Editable 只提供了一些 API，使用起来更加灵活。Leaflet.GeometryUtil 提供了一些 API 用于计算几何之间的关系，配合使用 Leaflet.Snap 可以实现在编辑几何图形时捕捉关键点并吸附的功能。</p>
<h4 id="下载源文件并引用"><a href="#下载源文件并引用" class="headerlink" title="下载源文件并引用"></a>下载源文件并引用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"/path/to/leaflet.geometryutil.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"/path/to/Leaflet.Editable.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"/path/to/leaflet.snap.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h4><p>修改 <code>mymap</code> 初始化方法，增加 <code>editable</code> 属性为 <code>true</code><br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mymap = L.map(<span class="string">'mapid'</span>, &#123;</span><br><span class="line">    editable: <span class="literal">true</span></span><br><span class="line">&#125;).setView([<span class="number">31.23037</span>, <span class="number">121.47370</span>], <span class="number">15</span>);</span><br></pre></td></tr></table></figure></p>
<p>然后在控件的点击事件中增加以下代码，根据需求分别调用不同的 API 即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开始画线</span></span><br><span class="line">mymap.editTools.startPolyline();</span><br><span class="line"><span class="comment">// 开始画多边形</span></span><br><span class="line">mymap.editTools.startPolygon();</span><br><span class="line"><span class="comment">// 开始添加标注</span></span><br><span class="line">mymap.editTools.startMarker();</span><br><span class="line"><span class="comment">// 开始画矩形</span></span><br><span class="line">mymap.editTools.startRectangle();</span><br><span class="line"><span class="comment">// 开始画圆</span></span><br><span class="line">mymap.editTools.startCircle();</span><br></pre></td></tr></table></figure>
<h4 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h4><p>而如果想要在一个已经完成的几何图形启用编辑功能也很简单，获取该对象并调用以下代码就可以了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">polyline.enableEdit();</span><br></pre></td></tr></table></figure>
<h4 id="点吸附"><a href="#点吸附" class="headerlink" title="点吸附"></a>点吸附</h4><p>在编辑状态时如果想要增加点吸附功能的话，则需要使用 Leaflet.Snap 配合 Leaflet.Editable 的编辑状态事件来实现相关功能。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 snap 显示的方格，并添加计算的 layer，</span></span><br><span class="line"><span class="keyword">var</span> snapMarker = L.marker(map.getCenter(), &#123;</span><br><span class="line">  icon: map.editTools.createVertexIcon(&#123;</span><br><span class="line">    className: <span class="string">"leaflet-div-icon leaflet-drawing-icon"</span></span><br><span class="line">  &#125;),</span><br><span class="line">  opacity: <span class="number">1</span>,</span><br><span class="line">  zIndexOffset: <span class="number">1000</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> snap = <span class="keyword">new</span> L.Handler.MarkerSnap(map);</span><br><span class="line">snap.watchMarker(snapMarker);</span><br><span class="line"><span class="comment">// 如果符合可吸附的规则，则添加辅助标记到地图上，不符合则移除。</span></span><br><span class="line">snapMarker.on(<span class="string">"snap"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  snapMarker.addTo(map);</span><br><span class="line">&#125;);</span><br><span class="line">snapMarker.on(<span class="string">"unsnap"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  snapMarker.remove();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在编辑状态更改时修改 snap 参考的 layer,</span></span><br><span class="line"><span class="keyword">var</span> followMouse = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  snapMarker.setLatLng(e.latlng);</span><br><span class="line">&#125;;</span><br><span class="line">mymap.on(<span class="string">"editable:vertex:dragstart"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  snap.watchMarker(e.vertex);</span><br><span class="line">&#125;);</span><br><span class="line">mymap.on(<span class="string">"editable:vertex:dragend"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  snap.unwatchMarker(e.vertex);</span><br><span class="line">&#125;);</span><br><span class="line">mymap.on(<span class="string">"editable:drawing:start"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.on(<span class="string">"mousemove"</span>, followMouse);</span><br><span class="line">&#125;);</span><br><span class="line">mymap.on(<span class="string">"editable:drawing:end"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.off(<span class="string">"mousemove"</span>, followMouse);</span><br><span class="line">  snapMarker.remove();</span><br><span class="line">  snap.addGuideLayer(e.layer);</span><br><span class="line">  e.layer.disableEdit();</span><br><span class="line">&#125;);</span><br><span class="line">mymap.on(<span class="string">"editable:drawing:click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//当处于新增状态是触发</span></span><br><span class="line">  <span class="keyword">var</span> latlng = snapMarker.getLatLng();</span><br><span class="line">  e.latlng.lat = latlng.lat;</span><br><span class="line">  e.latlng.lng = latlng.lng;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="点聚合"><a href="#点聚合" class="headerlink" title="点聚合"></a>点聚合</h3><p>使用 <a href="https://github.com/Leaflet/Leaflet.markercluster" target="_blank" rel="noopener">Leaflet.markercluster</a> 可以很方便的让我们做出点聚合的效果。</p>
<h4 id="下载文件并引用"><a href="#下载文件并引用" class="headerlink" title="下载文件并引用"></a>下载文件并引用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"path/to/MarkerCluster.css"</span> /&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"path/to/MarkerCluster.Default.css"</span> /&gt;</span><br><span class="line">&lt;script src=<span class="string">"path/to/leaflet.markercluster.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="添加标记"><a href="#添加标记" class="headerlink" title="添加标记"></a>添加标记</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成点聚合对象</span></span><br><span class="line"><span class="keyword">var</span> markers = L.markerClusterGroup();</span><br><span class="line"></span><br><span class="line"><span class="comment">// addressPoints 数据结构可根据实际情况组织，主要是为了方便生成标记</span></span><br><span class="line"><span class="comment">// 生成 marker 对象并添加到标记群组对象里面</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; addressPoints.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = addressPoints[i];</span><br><span class="line">  <span class="keyword">var</span> title = a[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">var</span> marker = L.marker(<span class="keyword">new</span> L.LatLng(a[<span class="number">0</span>], a[<span class="number">1</span>]), &#123; <span class="attr">title</span>: title &#125;);</span><br><span class="line">  marker.bindPopup(title);</span><br><span class="line">  markers.addLayer(marker);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// markers 添加到地图上</span></span><br><span class="line">mymap.addLayer(markers);</span><br></pre></td></tr></table></figure>
<h2 id="实际效果"><a href="#实际效果" class="headerlink" title="实际效果"></a>实际效果</h2><p>你可以在这里查看<a href="/leaflet.html">完整 Demo</a></p>
<p><img src="http://qiniu.0x0803.top/leaflet/7.gif_gif" alt></p>
<p>以上就是关于标记以及矢量图使用的一些总结了，主要介绍了一些类的基础知识和常用方法，以及如何使用三方插件实现一些简单的需求场景，但是我们发现到这里除了使用官方 API 就是使用三方插件，我们自己几乎没有写什么代码，虽然 Leaflet 相关的插件足以满足大部分需求，但是如果只是简单调用 API 的话，那么我们做的东西价值极低，对自身的进步也没有什么提升。想要实现更高级的东西往往需要我们自定义一些插件，接下来就学一下怎么实现自定义插件。</p>
]]></content>
      <categories>
        <category>GIS</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Leaflet</tag>
      </tags>
  </entry>
  <entry>
    <title>Leaflet 学习系列（二）加载地图</title>
    <url>/2018/05/27/gis-leaflet-tutorials-map-layer/</url>
    <content><![CDATA[<p><a href="/2018/05/27/gis-leaflet-tutorials-map/">上文</a>说到使用 Leaflet 可以方便的加载和切换不同的地图作为底图，Mapbox 地图、谷歌地图、天地图、高德地图、百度地图等。那么本篇文章就来介绍下如何快速开始使用 Leaflet 加载和切换不同的地图，以及地图相关的基础知识。</p>
<h2 id="准备-HTML-页面"><a href="#准备-HTML-页面" class="headerlink" title="准备 HTML 页面"></a>准备 HTML 页面</h2><p>需要以下准备步骤：</p>
<a id="more"></a>
<h3 id="创建-HTML-页面"><a href="#创建-HTML-页面" class="headerlink" title="创建 HTML 页面"></a>创建 HTML 页面</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="引用-CSS-文件"><a href="#引用-CSS-文件" class="headerlink" title="引用 CSS 文件"></a>引用 CSS 文件</h3><p>从 <a href="https://cdnjs.com/libraries/leaflet" target="_blank" rel="noopener">Leaflet 免费的 CDN </a>获取想要使用的版本的文件地址，然后在 <code>&lt;head&gt;</code> 标签里添加以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// integrity 和 crossorigin 如果不需要验证文件完整性也可以不添加</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.0.3/leaflet.css"</span> <span class="attr">integrity</span>=<span class="string">"sha256-bOWY8F32FGGbNDMPAnwWl/Lv9CKen4IQsNZ4RU9rcs0="</span></span></span><br><span class="line"><span class="tag">    <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>或者<a href="https://github.com/Leaflet/Leaflet/releases" target="_blank" rel="noopener">下载源码文件</a>后添加引用，如果你使用 <code>npm</code> 包管理可以<a href="https://leafletjs.com/download.html" target="_blank" rel="noopener">参考这里</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/path/to/leaflet.css"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="添加-JavaScript-文件"><a href="#添加-JavaScript-文件" class="headerlink" title="添加 JavaScript 文件"></a>添加 JavaScript 文件</h3><p>加载 CSS 之后添加 JavaScript 文件，记得 JS 文件的引用要放在 CSS 引用下面。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.0.3/leaflet.js"</span> <span class="attr">integrity</span>=<span class="string">"sha256-GXUdrV9FHGDyzoSGD3O+jR3eYZaZZsjbsMvFhK3C0qg="</span></span></span><br><span class="line"><span class="tag">  <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>或者引用源文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/path/to/leaflet.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="添加地图容器"><a href="#添加地图容器" class="headerlink" title="添加地图容器"></a>添加地图容器</h3><p>在 <code>&lt;body&gt;</code> 标签里面添加 <code>&lt;div&gt;</code>，并设置 <code>id</code> 属性：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mapid"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="设置地图容器样式"><a href="#设置地图容器样式" class="headerlink" title="设置地图容器样式"></a>设置地图容器样式</h3><p>可以根据实际情况设置地图的宽高。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#mapid</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="设置地图"><a href="#设置地图" class="headerlink" title="设置地图"></a>设置地图</h2><p>以上准备工作做好之后，就可以开始初始化地图了。在 <code>&lt;body&gt;</code> 下面添加 <code>&lt;script&gt;</code>，首先初始化地图并设置地图中心点坐标以及缩放级别。默认情况下地图上的所有鼠标和触摸交互都已启用，并且它具有左上角缩放和右下角地图归属控件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="keyword">var</span> mymap = L.map(<span class="string">'mapid'</span>).setView([<span class="number">51.505</span>, <span class="number">-0.09</span>], <span class="number">13</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>之后的 JS 代码都要放 <code>&lt;script&gt;</code> 标签里。然后我们需要在地图上添加瓦片图层，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">L.tileLayer(<span class="string">'https://api.tiles.mapbox.com/v4/&#123;id&#125;/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw'</span>, &#123;</span><br><span class="line">  maxZoom: <span class="number">18</span>,</span><br><span class="line">  attribution: <span class="string">'Map data &amp;copy; &lt;a href="https://www.openstreetmap.org/"&gt;OpenStreetMap&lt;/a&gt; contributors, '</span> +</span><br><span class="line">    <span class="string">'&lt;a href="https://creativecommons.org/licenses/by-sa/2.0/"&gt;CC-BY-SA&lt;/a&gt;, '</span> +</span><br><span class="line">    <span class="string">'Imagery © &lt;a href="https://www.mapbox.com/"&gt;Mapbox&lt;/a&gt;'</span>,</span><br><span class="line">  id: <span class="string">'mapbox.streets'</span></span><br><span class="line">&#125;).addTo(mymap);</span><br></pre></td></tr></table></figure>
<p>然后在浏览器中打开 HTML 页面就可以看到我们已经将地图加载出来了。</p>
<p><img src="http://qiniu.0x0803.top/leaflet/6.png_blog" alt></p>
<h2 id="常用属性、事件及方法"><a href="#常用属性、事件及方法" class="headerlink" title="常用属性、事件及方法"></a>常用属性、事件及方法</h2><p>可以看到上面代码 <code>L.map(&#39;mapid&#39;)</code> 生成 <code>map</code> 对象，然后使用 <code>setView</code> 方法设置位置以及缩放级别，一般调用地图的方法时也会返回地图对象，这样可以方便的进行链式方法调用。除了上面两个方法外还有以下常用<a href="https://leafletjs.com/reference-1.0.3.html#map-example" target="_blank" rel="noopener">属性、事件及方法</a></p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化方法</span></span><br><span class="line">L.map(&lt;String&gt; id, &lt;Map options&gt; options?)</span><br><span class="line"></span><br><span class="line">// 以下为常用属性及其默认值</span><br><span class="line">L.map('mapid', &#123;</span><br><span class="line">  attributionControl: true, // 设置为 false 隐藏地图归属信息控件</span><br><span class="line">  zoomControl: true, // 设置为 false 隐藏地图缩放控件</span><br><span class="line">  doubleClickZoom: true, // 设置为 false 禁止双击缩放</span><br><span class="line">  dragging: true, // 设置为 false 禁止鼠标拖动地图</span><br><span class="line">  center: LatLng, // 设置地图中心点位置信息</span><br><span class="line">  zoom: Number // 设置地图当前缩放级别</span><br><span class="line">  minZoom: Number // 设置地图最小缩放级别</span><br><span class="line">  maxZoom: Number // 设置地图最大缩放级别</span><br><span class="line">  scrollWheelZoom: true // 设置为 false 禁止使用鼠标滑轮缩放地图</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><a href="https://leafletjs.com/reference-1.0.3.html#map-option" target="_blank" rel="noopener">更多属性</a></p>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><table>
<thead>
<tr>
<th>事件名</th>
<th>类型</th>
<th>触发时机</th>
</tr>
</thead>
<tbody>
<tr>
<td>layeradd</td>
<td>LayerEvent</td>
<td>当一个新的图层添加到地图上时</td>
</tr>
<tr>
<td>layerremove</td>
<td>LayerEvent</td>
<td>当一个图层从地图上移除时</td>
</tr>
<tr>
<td>load</td>
<td>Event</td>
<td>当地图初始化完成时</td>
</tr>
<tr>
<td>click</td>
<td>MouseEvent</td>
<td>鼠标点击地图时</td>
</tr>
<tr>
<td>mousemove</td>
<td>MouseEvent</td>
<td>鼠标在地图上移动时</td>
</tr>
<tr>
<td>contextmenu</td>
<td>MouseEvent</td>
<td>鼠标在地图上点击右键时，可以监听此事件覆盖默认右键菜单（手机上长按屏幕）</td>
</tr>
</tbody>
</table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用方法</span></span><br><span class="line">mymap.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><a href="https://leafletjs.com/reference-1.0.3.html#map-event" target="_blank" rel="noopener">更多事件</a></p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><table>
<thead>
<tr>
<th>方法</th>
<th>返回值</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>addControl(<control> control)</control></td>
<td>this</td>
<td>在地图上添加控件</td>
</tr>
<tr>
<td>removeControl(<control> control)</control></td>
<td>this</td>
<td>移除地图上的控件</td>
</tr>
<tr>
<td>addLayer(<layer> layer)</layer></td>
<td>this</td>
<td>在地图上添加图层</td>
</tr>
<tr>
<td>removeLayer(<layer> layer)</layer></td>
<td>this</td>
<td>移除地图上的图层</td>
</tr>
<tr>
<td>openPopup(<popup> popup)</popup></td>
<td>this</td>
<td>打开 popup，并关闭其他 popup</td>
</tr>
<tr>
<td>closePopup(<popup> popup?)</popup></td>
<td>this</td>
<td>关闭 popup</td>
</tr>
<tr>
<td>setView(<latlng> center, <number> zoom, &lt;Zoom/pan options&gt; options?)</number></latlng></td>
<td>this</td>
<td>设置地图属性</td>
</tr>
<tr>
<td>setZoom(<number> zoom, &lt;Zoom/pan options&gt; options)</number></td>
<td>this</td>
<td>设置地图缩放级别</td>
</tr>
<tr>
<td>locate(<locate options> options?)</locate></td>
<td>this</td>
<td>使用 Geolocation API 获取用户位置信息，成功时触发“locationfound“事件，失败触发“locationerror”事件。在现代浏览器（Chrome 50及更新版本）如果网站不是 <code>https</code> 则会获取失败。返回坐标为 <code>WGS84</code>，可以使用 <a href="https://github.com/wandergis/coordtransform" target="_blank" rel="noopener">coordtransform</a> 转换为需要的坐标。</td>
</tr>
<tr>
<td>remove()</td>
<td>this</td>
<td>销毁地图并移除所有已监听的事件响应</td>
</tr>
</tbody>
</table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 上面的加载图层也可以用这种写法，效果一样。</span></span><br><span class="line">mymap.addLayer(</span><br><span class="line">  L.tileLayer(<span class="string">'https://api.tiles.mapbox.com/v4/&#123;id&#125;/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw'</span>, &#123;</span><br><span class="line">  maxZoom: <span class="number">18</span>,</span><br><span class="line">  attribution: <span class="string">'Map data &amp;copy; &lt;a href="https://www.openstreetmap.org/"&gt;OpenStreetMap&lt;/a&gt; contributors, '</span> +</span><br><span class="line">    <span class="string">'&lt;a href="https://creativecommons.org/licenses/by-sa/2.0/"&gt;CC-BY-SA&lt;/a&gt;, '</span> +</span><br><span class="line">    <span class="string">'Imagery © &lt;a href="https://www.mapbox.com/"&gt;Mapbox&lt;/a&gt;'</span>,</span><br><span class="line">  id: <span class="string">'mapbox.streets'</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
<p><a href="https://leafletjs.com/reference-1.0.3.html#map-methods-for-modifying-map-state" target="_blank" rel="noopener">更多方法</a></p>
<h2 id="加载其他地图服务"><a href="#加载其他地图服务" class="headerlink" title="加载其他地图服务"></a>加载其他地图服务</h2><p>虽然 Leaflet 默认教程中使用的都是 OpenStreetMap，但是在国内使用的话，高德地图、百度地图更加实用，使用 Leaflet 可以很简单的加载高德地图，而<a href="http://www.cnblogs.com/cglNet/archive/2013/11/26/3443637.html" target="_blank" rel="noopener">百度地图的瓦片规则和普通的互联网地图的瓦片规则</a>（<a href="http://cntchen.github.io/2016/05/09/国内主要地图瓦片坐标系定义及计算原理/" target="_blank" rel="noopener">相关1</a>，<a href="http://www.cnblogs.com/jz1108/archive/2011/07/02/2095376.html" target="_blank" rel="noopener">相关2</a>）不那么一样，需要进行转换后才能正常使用。不过 Leaflet 提供了 <a href="https://leafletjs.com/reference-1.0.3.html#crs" target="_blank" rel="noopener">CRS</a> 类定义坐标参考系统，用于将地理点投影到像素（屏幕）坐标（以及用于WMS服务的其他单位的坐标）。配合使用 <a href="https://github.com/kartena/Proj4Leaflet" target="_blank" rel="noopener">Proj4Leaflet</a> 插件可以方便实现自定义 CRS。然后使用 <a href="https://leafletjs.com/reference-1.0.3.html#tilelayer" target="_blank" rel="noopener">TileLayer</a> 加载地图图层。</p>
<h3 id="初始化方法"><a href="#初始化方法" class="headerlink" title="初始化方法"></a>初始化方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">L.tilelayer(&lt;String&gt; urlTemplate, &lt;TileLayer options&gt; options?)</span><br><span class="line"></span><br><span class="line">// 用法事例，常用属性及默认值</span><br><span class="line">L.tileLayer('https://&#123;s&#125;.tile.openstreetmap.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png?&#123;foo&#125;', &#123;</span><br><span class="line">  minZoom: 0, // 最小缩放级别</span><br><span class="line">  maxZoom: 18, // 最小缩放级别</span><br><span class="line">  subdomains: 'abc', // 子域名，对应 urlTemplate 链接中的参数 &#123;s&#125;</span><br><span class="line">  errorTileUrl: '', // 加载失败时的图片地址</span><br><span class="line">  detectRetina: false， // 用户在视网膜显示器上可以设置为true，来利用高分辨率。</span><br><span class="line">&#125;).addTo(mymap);</span><br></pre></td></tr></table></figure>
<h3 id="加载高德地图"><a href="#加载高德地图" class="headerlink" title="加载高德地图"></a>加载高德地图</h3><p>Leaflet Map 属性 <code>crs</code> 默认值为 <code>L.CRS.EPSG3857</code>，球形墨卡托投影。因此只要我们知道高德地图的瓦片图地址，无需对高德地图瓦片做任何处理，就能够加载出正确的地图。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mymap.addLayer(L.tileLayer(<span class="string">'http://webrd0&#123;s&#125;.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;scale=1&amp;style=8&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;'</span>, &#123;</span><br><span class="line">  subdomains: [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>],</span><br><span class="line">  minZoom: <span class="number">1</span>,</span><br><span class="line">  maxZoom: <span class="number">19</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
<p>类似的谷歌地图或者其他同类瓦片坐标地图我们只要知道瓦片地址链接，然后替换 <code>urlTemplate</code> 参数和 <code>subdomains</code> 属性就能加载不同的地图了。</p>
<table>
<thead>
<tr>
<th>地图</th>
<th>瓦片地址</th>
<th>子域名</th>
<th>层级</th>
</tr>
</thead>
<tbody>
<tr>
<td>高德地图</td>
<td><a href="http://webrd0{s}.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;scale=1&amp;style=8&amp;x={x}&amp;y={y}&amp;z={z}" target="_blank" rel="noopener">http://webrd0{s}.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;scale=1&amp;style=8&amp;x={x}&amp;y={y}&amp;z={z}</a></td>
<td>[‘1’, ‘2’, ‘3’, ‘4’]</td>
<td>1~19</td>
</tr>
<tr>
<td>高德地图卫星</td>
<td><a href="http://webst0{s}.is.autonavi.com/appmaptile?style=6&amp;x={x}&amp;y={y}&amp;z={z}" target="_blank" rel="noopener">http://webst0{s}.is.autonavi.com/appmaptile?style=6&amp;x={x}&amp;y={y}&amp;z={z}</a></td>
<td>[‘1’, ‘2’, ‘3’, ‘4’]</td>
<td>1~19</td>
</tr>
<tr>
<td>高德地图标注</td>
<td><a href="http://webst0{s}.is.autonavi.com/appmaptile?style=8&amp;x={x}&amp;y={y}&amp;z={z}" target="_blank" rel="noopener">http://webst0{s}.is.autonavi.com/appmaptile?style=8&amp;x={x}&amp;y={y}&amp;z={z}</a></td>
<td>[‘1’, ‘2’, ‘3’, ‘4’]</td>
<td>1~19</td>
</tr>
<tr>
<td>谷歌地图</td>
<td><a href="http://www.google.cn/maps/vt?lyrs=m@189&amp;gl=cn&amp;x={x}&amp;y={y}&amp;z={z}" target="_blank" rel="noopener">http://www.google.cn/maps/vt?lyrs=m@189&amp;gl=cn&amp;x={x}&amp;y={y}&amp;z={z}</a></td>
<td>[]</td>
<td>0~21</td>
</tr>
<tr>
<td>谷歌地图卫星</td>
<td><a href="http://www.google.cn/maps/vt?lyrs=s@189&amp;gl=cn&amp;x={x}&amp;y={y}&amp;z={z}" target="_blank" rel="noopener">http://www.google.cn/maps/vt?lyrs=s@189&amp;gl=cn&amp;x={x}&amp;y={y}&amp;z={z}</a></td>
<td>[]</td>
<td>0~21</td>
</tr>
</tbody>
</table>
<p>如果要用到以上所有的地图，可以使用 <a href="https://github.com/htoooth/Leaflet.ChineseTmsProviders" target="_blank" rel="noopener">Leaflet.ChineseTmsProviders</a> 插件，其对这些常用的地图做了简单封装，方便在地图上添加。</p>
<h3 id="加载百度地图"><a href="#加载百度地图" class="headerlink" title="加载百度地图"></a>加载百度地图</h3><p>上面说到百度地图需要进行转换后才能正常使用，其转换方法也有已知解决方案，如下步骤：</p>
<h4 id="添加-Proj4Leaflet"><a href="#添加-Proj4Leaflet" class="headerlink" title="添加 Proj4Leaflet"></a>添加 Proj4Leaflet</h4><p>从这里<a href="https://github.com/kartena/Proj4Leaflet" target="_blank" rel="noopener">下载源码</a>，然后添加引用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/path/to/proj4-compressed.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/path/to/proj4leaflet.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="自定义-CRS"><a href="#自定义-CRS" class="headerlink" title="自定义 CRS"></a>自定义 CRS</h4><p>初始化地图前，<a href="https://blog.csdn.net/u012087400/article/details/52847614?locationNum=13&amp;fps=1" target="_blank" rel="noopener">自定义 CRS</a> 并<a href="https://blog.csdn.net/u012087400/article/details/53744756?utm_source=itdadao&amp;utm_medium=referral" target="_blank" rel="noopener">纠偏</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化百度地图瓦片图层，投影坐标转换以纠偏地图显示问题</span></span><br><span class="line"><span class="keyword">const</span> baiduCrs = <span class="keyword">new</span> L.Proj.CRS(</span><br><span class="line">  <span class="string">"EPSG:900913"</span>,</span><br><span class="line">  <span class="string">"+proj=merc +a=6378206 +b=6356584.314245179 +lat_ts=0.0 +lon_0=0.0 +x_0=0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs"</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    resolutions: (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      level = <span class="number">19</span>;</span><br><span class="line">      <span class="keyword">var</span> res = [];</span><br><span class="line">      res[<span class="number">0</span>] = <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">18</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; level; i++) &#123;</span><br><span class="line">        res[i] = <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">18</span> - i);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;)(),</span><br><span class="line">    origin: [<span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    bounds: L.bounds([<span class="number">20037508.342789244</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">20037508.342789244</span>])</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mymap = L.map(<span class="string">"mapid"</span>, &#123;</span><br><span class="line">  crs: baiduCrs,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="百度地图图层"><a href="#百度地图图层" class="headerlink" title="百度地图图层"></a>百度地图图层</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TileLayer 扩展</span></span><br><span class="line">L.TileLayer.BaiduLayer = L.TileLayer.extend(&#123;</span><br><span class="line">  options: &#123;</span><br><span class="line">    minZoom: <span class="number">3</span>,</span><br><span class="line">    maxZoom: <span class="number">18</span>,</span><br><span class="line">    <span class="comment">// subdomains: ["online1", "online2", "online3"],</span></span><br><span class="line">    <span class="comment">// attribution:</span></span><br><span class="line">    <span class="comment">//   '&amp;copy; &lt;a href="http://www.ksudi.com"&gt;Ksudi&lt;/a&gt; contributors',</span></span><br><span class="line">    style: <span class="string">"normal"</span>,</span><br><span class="line">    tms: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  _urls: &#123;</span><br><span class="line">    normal:</span><br><span class="line">      <span class="string">"https://ss0.bdstatic.com/8bo_dTSlRsgBo1vgoIiO_jowehsv/tile/?qt=tile&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&amp;styles=pl&amp;scaler=2&amp;udt=20170803"</span>,</span><br><span class="line">    weixing:</span><br><span class="line">      <span class="string">"https://ss0.bdstatic.com/5bwHcj7lABFT8t_jkk_Z1zRvfdw6buu/it/u=x=&#123;x&#125;;y=&#123;y&#125;;z=&#123;z&#125;;v=009;type=sate&amp;fm=46&amp;udt=20170803"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  _weixing_label_url:</span><br><span class="line">    <span class="string">"https://ss0.bdstatic.com/8bo_dTSlRMgBo1vgoIiO_jowehsv/tile/?qt=tile&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&amp;styles=sl&amp;udt=20141015"</span>,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * url:</span></span><br><span class="line"><span class="comment">   * style:</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  initialize: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> url;</span><br><span class="line">    <span class="keyword">if</span> (options.url) &#123;</span><br><span class="line">      url = options.url;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.style) &#123;</span><br><span class="line">      url = that._urls[options.style];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    url || (url = that._urls[<span class="string">"normal"</span>]);</span><br><span class="line">    L.TileLayer.prototype.initialize.call(<span class="keyword">this</span>, url, options);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"weixing"</span> == options.style) &#123;</span><br><span class="line">      that.labelLayer = <span class="keyword">new</span> L.TileLayer.BaiduLayer(&#123;</span><br><span class="line">        url: that._weixing_label_url</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      that.on(<span class="string">"add"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        that.labelLayer.addTo(that._map);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  getTileUrl: <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> L.TileLayer.prototype.getTileUrl.call(<span class="keyword">this</span>, t);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">L.tileLayer.baiduLayer = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> L.TileLayer.BaiduLayer(options);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="添加到地图"><a href="#添加到地图" class="headerlink" title="添加到地图"></a>添加到地图</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> baiduLayer = L.tileLayer.baiduLayer(&#123;</span><br><span class="line">  style: <span class="string">"normal"</span></span><br><span class="line">&#125;);</span><br><span class="line">baiduLayer.addTo(mymap);</span><br></pre></td></tr></table></figure>
<h2 id="切换地图"><a href="#切换地图" class="headerlink" title="切换地图"></a>切换地图</h2><p>以上我们就把地图的常用方法，以及常用地图的加载介绍完毕。我们可能会有在使用时加载多个地图图层，然后根据情况切换图层的需求。我们可以借助于 <a href="https://leafletjs.com/reference-1.0.3.html#control-layers" target="_blank" rel="noopener">Control.Layers</a> 来实现。</p>
<table>
<thead>
<tr>
<th>初始化</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>L.control.layers(<object> baselayers?, <object> overlays?, &lt;Control.Layers options&gt; options?)</object></object></td>
<td>使用给定的层创建一个属性控件。基层将使用单选按钮来切换，而覆盖将用复选框来切换。请注意，所有的基层都应该在基层对象中传递，但是在地图实例化过程中，应该只在映射中添加一个。</td>
</tr>
</tbody>
</table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用方法</span></span><br><span class="line"><span class="keyword">var</span> baseLayers = &#123;</span><br><span class="line">    <span class="string">"Mapbox"</span>: mapbox,</span><br><span class="line">    <span class="string">"OpenStreetMap"</span>: osm</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> overlays = &#123;</span><br><span class="line">    <span class="string">"Marker"</span>: marker,</span><br><span class="line">    <span class="string">"Roads"</span>: roadsLayer</span><br><span class="line">&#125;;</span><br><span class="line">L.control.layers(baseLayers, overlays).addTo(map);</span><br></pre></td></tr></table></figure>
<p>实际 Demo 效果如下:</p>
<p><img src="http://qiniu.0x0803.top/leaflet/6.gif_gif" alt></p>
]]></content>
      <categories>
        <category>GIS</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Leaflet</tag>
      </tags>
  </entry>
  <entry>
    <title>Leaflet 学习系列（一）初识</title>
    <url>/2018/05/27/gis-leaflet-tutorials-map/</url>
    <content><![CDATA[<p>最近在学习 <a href="https://www.cnblogs.com/naaoveGIS/p/3887141.html" target="_blank" rel="noopener">WebGIS</a> 相关框架，现在 WebGIS 平台基本上有三类：一是专业的 GIS 服务商，像全球最成功的 GIS 软件公司 Esri，其提供了齐全 GIS 软件和平台解决方案。二是提供 WebGIS 的各种服务，如百度地图、高德地图等。三是开源的 GIS 软件，其中 WebGIS 服务器比较有代表性的有 <a href="http://geoserver.org/" target="_blank" rel="noopener">GeoServer</a>，前端开源库有 <a href="https://leafletjs.com/" target="_blank" rel="noopener">Leaflet</a> 和 <a href="https://openlayers.org/" target="_blank" rel="noopener">Openlayers</a>。由于百度地图提供的服务不满足公司业务需求，所以学习相关的框架。一开始接触的就是 Esri 提供的开源前端库 <a href="https://developers.arcgis.com/javascript/3/" target="_blank" rel="noopener">ArcGIS API for JavaScript v3.24</a>，在一段时间学习之后感觉没有太多的进步，其学习曲线相当陡峭，而且是基于 dojo 这个学习曲线同样陡峭，古老且文档资料稀缺的前端框架，作为一个互联网行业前端开发，非 GIS 相关专业且不打算在 GIS 行业深入发展，果断就放弃深入学习了。 Leaflet 是<a href="https://github.com/Leaflet/Leaflet" target="_blank" rel="noopener">开源</a> GIS 的，可以基于其他开源服务发布的地图服务来打造<a href="http://www.cnblogs.com/naaoveGIS/p/4187679.html" target="_blank" rel="noopener">全套的开源解决方案</a>，认定方向后就开始 Leaflet 的学习之旅。</p>
<a id="more"></a>
<h2 id="Leaflet-是什么"><a href="#Leaflet-是什么" class="headerlink" title="Leaflet 是什么"></a>Leaflet 是什么</h2><p>Leaflet 是一个为建设移动设备友好的互动地图，而开发的现代的、开源的 JavaScript 库。它是由 Vladimir Agafonkin 带领一个专业贡献者团队开发，虽然代码仅有 38 KB，但它具有开发人员开发在线地图的大部分功能。<br>Leaflet 设计坚持简便、高性能和可用性好的思想，在所有主要桌面和移动平台能高效运作，在现代浏览器上会利用 HTML5 和 CSS3 的优势，同时也支持旧的浏览器访问。支持插件扩展，有一个友好、易于使用的 <a href="https://leafletjs.com/reference-1.0.3.html" target="_blank" rel="noopener">API 文档</a>和一个简单的、可读的源代码。<br>Leaflet 强大的<a href="https://leafletjs.com/plugins.html" target="_blank" rel="noopener">开源库插件</a>涉及到地图应用的各个方面包括地图服务，数据提供，数据格式，地理编码，路线和路线搜索，地图控件和交互等类型的插件共有140多个。这些控件丰富 Leaflet 的功能，同时也可以十分方便的实现自定义的控件具有良好的可扩展性。</p>
<h2 id="Leaflet-能做什么"><a href="#Leaflet-能做什么" class="headerlink" title="Leaflet 能做什么"></a>Leaflet 能做什么</h2><p>上面一通官方介绍之后，对于 Leaflet 了解还是没有什么深刻的印象，那么我们就来看一下它究竟能做些什么，能提供什么样的功能。</p>
<h3 id="地图底图"><a href="#地图底图" class="headerlink" title="地图底图"></a>地图底图</h3><p>使用 Leaflet 可以加载和切换不同的地图作为底图，Mapbox地图、谷歌地图、天地图、高德地图、百度地图等。</p>
<p><img src="http://qiniu.0x0803.top/leaflet/1.gif_gif" alt></p>
<p><a href="http://leaflet-extras.github.io/leaflet-providers/preview/index.html" target="_blank" rel="noopener">在线演示</a></p>
<h3 id="标记、弹出窗口"><a href="#标记、弹出窗口" class="headerlink" title="标记、弹出窗口"></a>标记、弹出窗口</h3><p><img src="http://qiniu.0x0803.top/leaflet/2.gif_gif" alt></p>
<p><a href="https://leaflet.github.io/Leaflet.markercluster/example/marker-clustering-realworld.388.html" target="_blank" rel="noopener">在线演示</a></p>
<h3 id="矢量图层"><a href="#矢量图层" class="headerlink" title="矢量图层"></a>矢量图层</h3><p>使用 Leaflet 可以很提供了线，多边形，圆形，矩形，以及编辑这些矢量图层，配和使用一些插件可以很方便了对矢量空间数据创建和修改。</p>
<p><img src="http://qiniu.0x0803.top/leaflet/3.gif_gif" alt></p>
<p><a href="https://kklimczak.github.io/Leaflet.Pin/" target="_blank" rel="noopener">在线演示</a></p>
<h3 id="路线规划"><a href="#路线规划" class="headerlink" title="路线规划"></a>路线规划</h3><p><img src="http://qiniu.0x0803.top/leaflet/3.png_blog" alt></p>
<p><a href="http://www.liedman.net/leaflet-routing-machine/" target="_blank" rel="noopener">在线演示</a></p>
<h3 id="地理检索"><a href="#地理检索" class="headerlink" title="地理检索"></a>地理检索</h3><p><img src="http://qiniu.0x0803.top/leaflet/5.gif_gif" alt></p>
<p><a href="https://smeijer.github.io/leaflet-geosearch/#openstreetmap" target="_blank" rel="noopener">在线演示</a></p>
<h3 id="热力图"><a href="#热力图" class="headerlink" title="热力图"></a>热力图</h3><p><img src="http://qiniu.0x0803.top/leaflet/4.png_blog" alt></p>
<p><a href="http://leaflet.github.io/Leaflet.heat/demo/" target="_blank" rel="noopener">在线演示</a></p>
<h3 id="Echarts-制图"><a href="#Echarts-制图" class="headerlink" title="Echarts 制图"></a>Echarts 制图</h3><p>使用 Leaflet 可以配合一些图表库来展示信息，比如使用百度提供的数据配合 Echarts 制作迁徙图。</p>
<p><img src="http://qiniu.0x0803.top/leaflet/4.gif_gif" alt></p>
<p><a href="http://wandergis.com/leaflet-echarts/" target="_blank" rel="noopener">在线演示</a>  <a href="http://wandergis.com/leaflet-echarts3/examples/index2.html" target="_blank" rel="noopener">在线演示</a></p>
<h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>相信通过上面的图文演示之后，大家对 Leaflet 是什么，能做什么会有一定的了解。目前 Leaflet <a href="https://leafletjs.com/reference-versions.html" target="_blank" rel="noopener">版本</a>已经更新到 v1.3.1。而版本的更新带来了一些弊端就是一些三方库没有兼容到最新版本，根据我多次尝试之后，最终选择使用 v1.0.3 版本作为接下来的学习使用。接下来就从加载各种地图底图来开始 Leaflet 学习之旅吧~</p>
]]></content>
      <categories>
        <category>GIS</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Leaflet</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序集成百度地图 API 及路线规划等功能</title>
    <url>/2018/05/23/weapp-baidu-map-api-and-direction-etc/</url>
    <content><![CDATA[<p>目前微信小程序提供了 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/map.html" target="_blank" rel="noopener"><code>map</code></a> 组件用于展示一些地图信息，以及获取当前<a href="https://developers.weixin.qq.com/miniprogram/dev/api/location.html" target="_blank" rel="noopener">位置</a>的 API <code>wx.getLocation(OBJECT)</code>。如果想要基于 <code>map</code> 组件做一些扩展功能，就需要集成一些三方 API，如百度地图、高德地图来实现。本文使用百度地图微信小程序 JavaScript API，并增加一些额外功能。</p>
<h2 id="小程序百度地图"><a href="#小程序百度地图" class="headerlink" title="小程序百度地图"></a>小程序百度地图</h2><h3 id="简述集成步骤"><a href="#简述集成步骤" class="headerlink" title="简述集成步骤"></a>简述集成步骤</h3><ol>
<li>注册并登录<a href="http://lbsyun.baidu.com/index.php?title=%E9%A6%96%E9%A1%B5" target="_blank" rel="noopener">百度地图开发平台</a></li>
<li>到<a href="http://lbsyun.baidu.com/apiconsole/key" target="_blank" rel="noopener">控制台</a>创建应用并获取服务密钥</li>
<li>下载<a href="http://lbsyun.baidu.com/index.php?title=wxjsapi/wxjs-download" target="_blank" rel="noopener">百度地图微信小程序 JavaScript API</a></li>
<li>添加 JS 文件到微信小程序中</li>
<li>配置小程序合法域名</li>
<li>开始开发功能<a id="more"></a>
详细入门指南参照百度<a href="http://lbsyun.baidu.com/index.php?title=wxjsapi/guide/key" target="_blank" rel="noopener">官方文档</a>，下载 API 后发现有 <code>bmap-wx.js</code> 和 <code>bmap-wx.min.js</code> 一个是正常的文件，另一个是压缩代码后的文件。这里选择 <code>bmap-wx.js</code> 未压缩的文件，方便之后增加功能。</li>
</ol>
<h3 id="默认功能"><a href="#默认功能" class="headerlink" title="默认功能"></a>默认功能</h3><p>目前百度地图微信小程序 JavaScript API 内只提供了以下四个接口。</p>
<ul>
<li>POI 检索</li>
<li>POI 检索热词联想</li>
<li>逆地址解析</li>
<li>天气查询</li>
</ul>
<p>同样这里官方提供了很好的 <a href="http://lbsyun.baidu.com/index.php?title=wxjsapi/guide/getpoi" target="_blank" rel="noopener">DEMO</a>，就不重复实现了。</p>
<h2 id="添加其他百度地图服务"><a href="#添加其他百度地图服务" class="headerlink" title="添加其他百度地图服务"></a>添加其他百度地图服务</h2><p>百度地图默认提供的小程序接口功能太少，我们可以自己动手实现其他百度地图服务。通过查看百度地图微信小程序 API，我们可以发现，其实现方式主要是通过 <code>wx.request</code> 请求 <code>RESTful</code> 接口，然后处理接口返回数据，通过 <code>map</code> 组件提供的一些属性（<code>markers</code>, <code>polyline</code>, <code>include-points</code>）来显示返回数据，需要注意的是百度地图默认使用的是百度坐标（BD09），而 <code>map</code> 组件使用的是国测局坐标（火星坐标系，gcj02），所以我们需要把坐标统一转换为 <code>gcj02</code>。知道思路后就开始实现吧。</p>
<h3 id="路线规划"><a href="#路线规划" class="headerlink" title="路线规划"></a>路线规划</h3><p>这里以驾车路线规划为例，查看<a href="https://developers.weixin.qq.com/miniprogram/dev/component/map.html" target="_blank" rel="noopener">路线规划 服务API</a>，根据文档传入比较关键的几个参数 </p>
<table>
<thead>
<tr>
<th>参数</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>origin</td>
<td>起点经纬度，小数点后不超过6位，40.056878,116.30815</td>
</tr>
<tr>
<td>destination</td>
<td>终点经纬度，小数点后不超过6位，40.056878,116.30815</td>
</tr>
<tr>
<td>coord_type</td>
<td>坐标类型，默认为bd09ll。这里传入 <code>gcj02</code></td>
</tr>
<tr>
<td>ret_coordtype</td>
<td>返回结果坐标类型，默认为bd09ll，这里传入 <code>gcj02</code></td>
</tr>
<tr>
<td>ak</td>
<td>填申请的密钥（和小程序不是同一个，控制台添加时选择服务端，注意要白名单不要做 IP 限制）</td>
</tr>
</tbody>
</table>
<p>实现代码就比较简单了，在 <code>success</code> 方法中处理返回数据，按照 <code>map</code> 组件 <code>polyline</code> 属性需要的参数格式，尽量使 <code>route</code> 方法回掉时的数据能够直接使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">route(&#123; ori, des, success = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;, fail = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125; &#125;) &#123;</span><br><span class="line">  <span class="comment">// http://lbsyun.baidu.com/index.php?title=webapi/direction-api-v2</span></span><br><span class="line">  <span class="keyword">if</span> (!ori || !des) &#123;</span><br><span class="line">    fail(&#123;</span><br><span class="line">      errMsg: <span class="string">'传入起点终点经纬度'</span>,</span><br><span class="line">      statusCode: <span class="number">-1</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">let</span> routeparam = &#123;</span><br><span class="line">    origin: ori,</span><br><span class="line">    destination: des,</span><br><span class="line">    coord_type: <span class="string">'gcj02'</span>,</span><br><span class="line">    ret_coordtype: <span class="string">'gcj02'</span>,</span><br><span class="line">    ak: <span class="string">'zIfvklWXpDFGCDzaHdZM6VOdeZWSO8US'</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  wx.request(&#123;</span><br><span class="line">    url: <span class="string">'https://api.map.baidu.com/direction/v2/driving'</span>,</span><br><span class="line">    data: routeparam,</span><br><span class="line">    header: &#123;</span><br><span class="line">      <span class="string">"content-type"</span>: <span class="string">"application/json"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    method: <span class="string">'GET'</span>,</span><br><span class="line">    success(res) &#123;</span><br><span class="line">      <span class="keyword">const</span> data = res.data;</span><br><span class="line">      <span class="keyword">if</span> (data[<span class="string">"status"</span>] === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> res = data[<span class="string">"result"</span>];</span><br><span class="line">        <span class="keyword">const</span> &#123; origin, destination, routes &#125; = res;</span><br><span class="line">        <span class="keyword">const</span> &#123; distance, duration, steps &#125; = routes[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">let</span> newSteps = [];</span><br><span class="line">        steps &amp;&amp; steps.forEach(<span class="function">(<span class="params">value, index</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> start = &#123;</span><br><span class="line">            latitude: value.start_location.lat,</span><br><span class="line">            longitude: value.start_location.lng</span><br><span class="line">          &#125;</span><br><span class="line">          newSteps.push(start);</span><br><span class="line">          <span class="keyword">if</span> (index == steps.length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> end = &#123;</span><br><span class="line">              latitude: value.end_location.lat,</span><br><span class="line">              longitude: value.end_location.lng</span><br><span class="line">            &#125;</span><br><span class="line">            newSteps.push(end);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">const</span> result = &#123;</span><br><span class="line">          distance,</span><br><span class="line">          duration,</span><br><span class="line">          steps: newSteps</span><br><span class="line">        &#125;;</span><br><span class="line">        success(result);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fail(&#123;</span><br><span class="line">          errMsg: data[<span class="string">"message"</span>],</span><br><span class="line">          statusCode: data[<span class="string">"status"</span>]</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    fail(data) &#123;</span><br><span class="line">      fail(data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/NoPPT/wx-app-demo" target="_blank" rel="noopener">完整 Demo 代码在这里</a></p>
<h3 id="其他服务"><a href="#其他服务" class="headerlink" title="其他服务"></a>其他服务</h3><p>和路线规划一样，基本上所有在 <a href="http://lbsyun.baidu.com/index.php?title=webapi" target="_blank" rel="noopener">WEB 服务API</a> 中提供的功能，都可以改造成可以适用微信小程序。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>我们可以发现其实没有什么难度，主要是调用接口然后处理数据罢了。虽然扩展百度地图小程序 API 很方便，但是并不建议企业项目直接添加。因为我们的实现是在小程序中使用百度地图服务端 API，所以我们在申请密钥时不能对 IP 做限制，不然无法让每部手机都能请求数据。如果自己写写 DEMO 的话可能无关紧要，但是如果做为企业使用的话，尽量让后台开发人员写接口调用百度地图 API 以保证密钥 AK 的安全性。</p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>API</tag>
        <tag>微信小程序</tag>
        <tag>百度地图</tag>
      </tags>
  </entry>
  <entry>
    <title>ArcGIS SnappingManager 捕捉管理器</title>
    <url>/2018/05/23/gis-arcgis-api-3-24-snappingmanager/</url>
    <content><![CDATA[<p>使用 <code>SnappingManager</code> 可以用于给 Editor, Measurement Widget,  Draw toolbar 以及 Edit toolbar 等添加捕捉功能。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>当在地图上添加几何时，由于缩放级别，无法令两个几何相邻的边准确的重叠在一起，或者无法准确的在一条边上添加点，此时可以开启捕捉功能，当鼠标位置在响应范围内时，会自动移动到对应的边、顶点或者点。</p>
<a id="more"></a>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><table>
<thead>
<tr>
<th>Method</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>new SnappingManager(options?)</td>
<td>构造函数</td>
</tr>
<tr>
<td>destroy()</td>
<td>销毁对象</td>
</tr>
<tr>
<td>getSnappingPoint(screenPoint)</td>
<td>传入屏幕中的点，如果捕捉到该点会在回掉函数中返回</td>
</tr>
<tr>
<td>setLayerInfos(layerInfos)</td>
<td>鼠标移动时如果同 layerInfos 数组中的 layer 边界、顶点等有重合，将会自动捕捉到重叠的点</td>
</tr>
</tbody>
</table>
<h3 id="new-SnappingManager-options"><a href="#new-SnappingManager-options" class="headerlink" title="new SnappingManager(options?)"></a>new SnappingManager(options?)</h3><p>创建一个新的SnappingManager对象。如果要为 Editor, Measurement Widget,  Draw toolbar 以及 Edit toolbar 启用捕捉，请调用地图的 enableSnapping 方法。如果需要修改默认选项，则创建一个新的捕捉管理器对象。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>值类型</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>alwaysSnap</td>
<td>Boolean</td>
<td>默认为 false, 此时用户可以通过配合使用快捷键来启用捕捉功能。设置为 true, 捕捉功能可以一直使用</td>
</tr>
<tr>
<td>layerInfos</td>
<td>Array<layer></layer></td>
<td>设定可捕捉的 Layer</td>
</tr>
<tr>
<td>map</td>
<td>Map</td>
<td>必要参数，用于设定相关联地图</td>
</tr>
<tr>
<td>snapKey</td>
<td>dojo/keys</td>
<td>当alwaysSnap设置为false时，使用此选项来定义关键用户按下以启用捕捉。默认值是dojo.copyKey。dojo.copyKey是一个虚拟键，映射到Windows上的CTRL和mac上的Command键。</td>
</tr>
<tr>
<td>snapPointSymbol</td>
<td>SimpleMarkerSymbol</td>
<td>定义捕捉位置的符号。默认符号是一个简单的标记符号，具有以下属性：size:15px, color:cyan, style:STYLE_CROSS。</td>
</tr>
<tr>
<td>tolerance</td>
<td>Number</td>
<td>响应范围，在指定像素的半径的圆内的话则为捕捉到。 默认值是15像素。</td>
</tr>
</tbody>
</table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 调用地图的 enableSnapping 方法</span><br><span class="line"><span class="keyword">var</span> snapManager = map.enableSnapping(&#123;</span><br><span class="line">  alwaysSnap: <span class="literal">false</span>,</span><br><span class="line">  snapKey: has(<span class="string">"mac"</span>) ? keys.META : keys.CTRL</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="destroy"><a href="#destroy" class="headerlink" title="destroy()"></a>destroy()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">snappingManager.destroy();</span><br></pre></td></tr></table></figure>
<h3 id="getSnappingPoint-screenPoint"><a href="#getSnappingPoint-screenPoint" class="headerlink" title="getSnappingPoint(screenPoint)"></a>getSnappingPoint(screenPoint)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> deferred = snappingManager.getSnappingPoint(evt.screenPoint);</span><br><span class="line"></span><br><span class="line">deferred.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(value !== <span class="literal">undefined</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> snapPoint = value;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'failure'</span>);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="setLayerInfos-layerInfos"><a href="#setLayerInfos-layerInfos" class="headerlink" title="setLayerInfos(layerInfos)"></a>setLayerInfos(layerInfos)</h3><table>
<thead>
<tr>
<th>属性</th>
<th>值类型</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>layer</td>
<td>Layer</td>
<td>默认选项是将地图中的所有特征和图形图层设置为目标捕捉图层</td>
</tr>
<tr>
<td>snapToEdge</td>
<td>Boolean</td>
<td>默认 true, 对于 polyline or polygon 的边启用捕捉</td>
</tr>
<tr>
<td>snapToPoint</td>
<td>Boolean</td>
<td>默认 true, 对于 point 的点启用捕捉</td>
</tr>
<tr>
<td>snapToVertex</td>
<td>Boolean</td>
<td>默认 true, 对于 polyline or polygon 的顶点启用捕捉</td>
</tr>
</tbody>
</table>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># layerInfos like:</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    layer: &#123;</span><br><span class="line">      ...layer</span><br><span class="line">    &#125;,</span><br><span class="line">    snapToEdge: true,</span><br><span class="line">    snapToPoint: true,</span><br><span class="line">    snapToVertex: true</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> layerInfos = [</span><br><span class="line"></span><br><span class="line">  &#123;<span class="attr">layer</span>:results[<span class="number">0</span>].layer&#125;</span><br><span class="line"></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">snappingManager.setLayerInfos(layerInfos);</span><br></pre></td></tr></table></figure>
<h2 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h2><p><a href="https://developers.arcgis.com/javascript/3/jssamples/widget_measurement.html" target="_blank" rel="noopener">官方Demo</a></p>
]]></content>
      <categories>
        <category>GIS</category>
      </categories>
      <tags>
        <tag>ArcGIS</tag>
        <tag>JavaScript</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>ArcGIS for JavaScript API v3.24 部署指南</title>
    <url>/2018/05/23/gis-arcgis-for-javascript-api-deploy/</url>
    <content><![CDATA[<h2 id="下载-API-amp-SDK"><a href="#下载-API-amp-SDK" class="headerlink" title="下载 API &amp; SDK"></a>下载 API &amp; SDK</h2><p><a href="https://developers.arcgis.com/downloads/apis-and-sdks" target="_blank" rel="noopener">APIs &amp; SDKs 下载地址</a></p>
<p>只有注册并登录帐号后才能从 ArcGIS for Developers 中下载相关的 API 和 SDK。</p>
<p>登录后选择要下载的产品相应的 API 和 Documentation：</p>
<table>
<thead>
<tr>
<th>Product</th>
<th>Version</th>
</tr>
</thead>
<tbody>
<tr>
<td>ArcGIS API for JavaScript</td>
<td>3.24</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="解压-API-到文件夹"><a href="#解压-API-到文件夹" class="headerlink" title="解压 API 到文件夹"></a>解压 API 到文件夹</h2><p>对应的目录结构树如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/Users/oeffect/Downloads/arcgis_js_v324_api</span><br><span class="line">├── arcgis_js_api</span><br><span class="line">│   └── library</span><br><span class="line">│       └── 3.24</span><br><span class="line">│           ├── 3.24</span><br><span class="line">│           ├── 3.24compact</span><br><span class="line">│           ├── install_api_linux.html</span><br><span class="line">│           └── install_api_windows.html</span><br><span class="line">├── install.html</span><br><span class="line">└── legal</span><br><span class="line">    └── EULA.pdf</span><br></pre></td></tr></table></figure>
<h2 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h2><p>主要文件为 <code>arcgis_js_api/library/3.24</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line"></span><br><span class="line">    location /arcgis/ &#123;</span><br><span class="line">        autoindex on;</span><br><span class="line">        alias /usr/local/var/www/library/arcgis/3.24/;</span><br><span class="line">        index install_api_linux.html;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果出现 403 Forbidden 情况，可以关闭 nginx 的第一行的注释，并修改配置为资源文件夹的用户以及用户组（Mac系统），如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user root staff;</span><br></pre></td></tr></table></figure>
<p>同时开启目录浏览功能，如上配置 <code>autoindex</code> 值为 <code>on</code>。</p>
<p>打开 <code>http://localhost/arcgis/</code> 可以看到安装指南。</p>
<h2 id="根据文档修改配置"><a href="#根据文档修改配置" class="headerlink" title="根据文档修改配置"></a>根据文档修改配置</h2><p>如果没有相应的安全证书，可修改 <code>https</code> 为 <code>http</code> </p>
<h3 id="修改默认-3-24-文件下的配置"><a href="#修改默认-3-24-文件下的配置" class="headerlink" title="修改默认 3.24 文件下的配置"></a>修改默认 <code>3.24</code> 文件下的配置</h3><ol>
<li><p>打开 <code>arcgis_js_api/library/3.24/3.24/init.js</code> 文件搜索并替换 <code>https://[HOSTNAME_AND_PATH_TO_JSAPI]/dojo</code> 为当前部署的地址 <code>https://www.example.com/arcgis_js_api/library/3.24/3.24/dojo</code></p>
</li>
<li><p>打开 <code>arcgis_js_api/library/3.24/3.24/dojo/dojo.js</code> 文件搜索并替换 <code>https://[HOSTNAME_AND_PATH_TO_JSAPI]/dojo</code> 为当前部署的地址 <code>https://www.example.com/arcgis_js_api/library/3.24/3.24/dojo</code></p>
</li>
</ol>
<h3 id="修改-compact-文件下的配置"><a href="#修改-compact-文件下的配置" class="headerlink" title="修改 compact 文件下的配置"></a>修改 <code>compact</code> 文件下的配置</h3><ol>
<li><p>打开 <code>/var/www/html/arcgis_js_api/library/3.24/3.24compact/init.js</code>  文件搜索并替换 <code>https://[HOSTNAME_AND_PATH_TO_JSAPI]dojo</code> 为当前部署的地址  <code>https://www.example.com/arcgis_js_api/library/3.24/3.24compact/dojo</code></p>
</li>
<li><p>打开 <code>/var/www/html/arcgis_js_api/library/3.24/3.24compact/dojo/dojo.js</code> 文件搜索并替换 <code>https://[HOSTNAME_AND_PATH_TO_JSAPI]dojo</code> 为当前部署的地址 <code>https://www.example.com/arcgis_js_api/library/3.24/3.24compact/dojo</code></p>
</li>
</ol>
<h2 id="测试使用"><a href="#测试使用" class="headerlink" title="测试使用"></a>测试使用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test Map<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://www.example.com/arcgis_js_api/library/3.24/3.24/esri/css/esri.css"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://www.example.com/arcgis_js_api/library/3.24/3.24/init.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      html,</span><br><span class="line">      body,</span><br><span class="line"><span class="css">      <span class="selector-id">#map</span> &#123;</span></span><br><span class="line">        height: 100%;</span><br><span class="line">        width: 100%;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">require</span>([</span></span><br><span class="line"><span class="javascript">          <span class="string">"esri/map"</span>,</span></span><br><span class="line"><span class="javascript">          <span class="string">"esri/layers/ArcGISTiledMapServiceLayer"</span>,</span></span><br><span class="line"><span class="javascript">          <span class="string">"dojo/domReady!"</span></span></span><br><span class="line"><span class="javascript">      ],<span class="function"><span class="keyword">function</span>(<span class="params">Map, ArcGISTiledMapServiceLayer</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="string">"map"</span>);</span></span><br><span class="line"><span class="javascript">          <span class="comment">//If you do not have Internet access then you will need to point this url to your own locally accessible tiled service.</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> tiled = <span class="keyword">new</span> ArcGISTiledMapServiceLayer(<span class="string">"https://services.arcgisonline.com/arcgis/rest/services/Ocean/World_Ocean_Base/MapServer"</span>);</span></span><br><span class="line">          map.addLayer(tiled);</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>GIS</category>
      </categories>
      <tags>
        <tag>ArcGIS</tag>
        <tag>JavaScript</tag>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序实践问题总结</title>
    <url>/2018/05/09/weapp-practices-problems/</url>
    <content><![CDATA[<h3 id="如何使组件高度为满屏，并非自动收缩高度"><a href="#如何使组件高度为满屏，并非自动收缩高度" class="headerlink" title="如何使组件高度为满屏，并非自动收缩高度"></a>如何使组件高度为满屏，并非自动收缩高度</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># 自动收缩高度</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 满屏</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="position-各值的区别"><a href="#position-各值的区别" class="headerlink" title="position 各值的区别"></a><code>position</code> 各值的区别</h3><ul>
<li>fixed（固定定位）：生成绝对定位的元素，相对于当前 window 进行定位。</li>
<li>absolute（绝对定位）：生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。</li>
<li>static（静态定位）：默认值。没有定位，元素出现在正常的流中。</li>
<li><p>relative（相对定位）：生成相对定位的元素，通过top,bottom,left,right的设置相对于其正常（原先本身）位置进行定位。可通过z-index进行层次分级。</p>
</li>
<li><p>添加在 <code>scroll-view</code>, <code>swiper</code> 内部的组件如果设置 <code>css</code> 属性 <code>position: fixed</code> 后在 iOS 真机上表现形式同 <code>position: absolute</code></p>
</li>
</ul>
<h3 id="添加-overflow-属性后，iOS-真机-z-index-失效"><a href="#添加-overflow-属性后，iOS-真机-z-index-失效" class="headerlink" title="添加 overflow 属性后，iOS 真机 z-index 失效"></a>添加 <code>overflow</code> 属性后，iOS 真机 <code>z-index</code> 失效</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.home-search-content</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">300</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">  <span class="comment">/* overflow: hidden; */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="重复添加同一动画效果无效"><a href="#重复添加同一动画效果无效" class="headerlink" title="重复添加同一动画效果无效"></a>重复添加同一动画效果无效</h3><p>原因是每次 export 方法调用后会清掉之前的动画效果。加粗的注意事项当时竟然看到后没有思考可能出现的情况。<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/api/api-animation.html#wxcreateanimationobject" target="_blank" rel="noopener">wx.createAnimation(OBJECT)</a></p>
<h3 id="scroll-view-高度自动填充剩余高度"><a href="#scroll-view-高度自动填充剩余高度" class="headerlink" title="scroll-view 高度自动填充剩余高度"></a><code>scroll-view</code> 高度自动填充剩余高度</h3><p>设置 <code>scroll-view</code> 高度自动填充剩余高度，且纵向滑动。（此种方法在性能较差机器上，且scrollview内部子组件会经常变化时可能导致一些渲染问题）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">view</span> <span class="selector-tag">height</span>: 100%; <span class="selector-tag">overflow-y</span>: <span class="selector-tag">auto</span></span><br><span class="line"><span class="selector-tag">---------------------</span></span><br><span class="line"><span class="selector-tag">topbar</span> <span class="selector-tag">height</span>: 98<span class="selector-tag">rpx</span>;</span><br><span class="line"><span class="selector-tag">---</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">scroll-view</span> <span class="selector-tag">height</span>: 100%;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">---</span></span><br><span class="line"><span class="selector-tag">tabbar</span> <span class="selector-tag">height</span>: 98<span class="selector-tag">rpx</span>;</span><br><span class="line"><span class="selector-tag">---------------------</span></span><br><span class="line"></span><br><span class="line">设置 <span class="selector-tag">scroll-view</span>  <span class="selector-tag">height</span>: 100%,</span><br><span class="line">设置其父容器  <span class="selector-tag">height</span>: 100%; <span class="selector-tag">overflow-y</span>: <span class="selector-tag">auto</span>;</span><br></pre></td></tr></table></figure>
<p>设置 <code>scroll-view</code> 高度为 <code>100vh</code>，然后设置 <code>topbar</code> 和 <code>tabbar</code> 为绝对定位。然后设置 <code>scroll-view</code> 内部组件的第一个和最后一个，分别设置 <code>margin-top: @topbar-height</code> 和 <code>margin-bottom: @tabbar-height</code>（在设置高度为100vh后，如果 topbar 和 tabbar 的定位不是绝对定位的话，scroll-view 不能占满整个屏幕，此时在当前 scroll-view 弹出一个定位信息为 fixed 的 modal 时，可能导致 scroll-view 的滑动出现一定的问题，如不能滑动到最顶部。）</p>
<h3 id="小程序与小游戏获取用户信息接口调整"><a href="#小程序与小游戏获取用户信息接口调整" class="headerlink" title="小程序与小游戏获取用户信息接口调整"></a><a href="https://developers.weixin.qq.com/blogdetail?action=get_post_info&amp;lang=zh_CN&amp;token=722216948&amp;docid=0000a26e1aca6012e896a517556c01&amp;devtools=1" target="_blank" rel="noopener">小程序与小游戏获取用户信息接口调整</a></h3><p>为优化用户体验，使用 <code>wx.getUserInfo</code> 接口直接弹出授权框的开发方式将逐步不再支持，使用 <code>&lt;button /&gt;</code> 组件，并将 <code>open-type</code> 指定为 <code>getUserInfo</code> 类型，获取用户基本信息。限于 <code>&lt;button /&gt;</code> 样式问题，有时一些自定义组件需要触发获取用户信息，可以在自定义组件上面覆盖一个 <code>&lt;button /&gt;</code>，并隐藏 <code>&lt;button /&gt;</code> 的显示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">'ksd-tabbar-button'</span> plain style=<span class="string">'border: none;'</span> open-type=<span class="string">"getUserInfo"</span> bindgetuserinfo=<span class="string">"bindCustom"</span> bindtap=<span class="string">'onTapTabbarItem'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">.ksd-tabbar-button &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: <span class="number">0</span>;</span><br><span class="line">  height: <span class="number">100</span>%;</span><br><span class="line">  width: <span class="number">100</span>%;</span><br><span class="line">  background-color: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>持续更新…</p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
        <tag>问题总结</tag>
      </tags>
  </entry>
  <entry>
    <title>上传项目到 npm</title>
    <url>/2018/04/10/publishing-npm-packages/</url>
    <content><![CDATA[<p>本文介绍如何上传自己写的 npm 组件包到 <a href="https://www.npmjs.com" target="_blank" rel="noopener">npm 官方库</a>。当你的组件代码已经完成了之后，只需要简单执行几个步骤就能发布项目共享上去给别人使用了。</p>
<a id="more"></a>
<h2 id="创建项目的-package-json-文件"><a href="#创建项目的-package-json-文件" class="headerlink" title="创建项目的 package.json 文件"></a>创建项目的 <code>package.json</code> 文件</h2><h3 id="通过命令行创建-package-json-文件"><a href="#通过命令行创建-package-json-文件" class="headerlink" title="通过命令行创建 package.json 文件"></a>通过命令行创建 <code>package.json</code> 文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 切换到项目目录</span><br><span class="line"><span class="meta">$</span> cd PublishProjectName</span><br><span class="line"><span class="meta">#</span> 执行 `npm init`</span><br><span class="line"><span class="meta">$</span> npm init</span><br><span class="line"><span class="meta">#</span> 执行结果如下，按照进度填写项目信息就行了~</span><br><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line"></span><br><span class="line">See `npm help json` for definitive documentation on these fields</span><br><span class="line">and exactly what they do.</span><br><span class="line"></span><br><span class="line">Use `npm install &lt;pkg&gt; --save` afterwards to install a package and</span><br><span class="line">save it as a dependency in the package.json file.</span><br><span class="line"></span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">name: (PublishProjectName) test</span><br><span class="line">version: (1.0.0)</span><br><span class="line">description:</span><br><span class="line">entry point: (index.js)</span><br><span class="line">test command:</span><br><span class="line">git repository:</span><br><span class="line">keywords:</span><br><span class="line">author:</span><br><span class="line">license: (ISC)</span><br><span class="line">About to write to /Users/xxx/Desktop/PublishProjectName/package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "name": "test",</span><br><span class="line">  "version": "1.0.0",</span><br><span class="line">  "description": "",</span><br><span class="line">  "main": "index.js",</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"</span><br><span class="line">  &#125;,</span><br><span class="line">  "author": "",</span><br><span class="line">  "license": "ISC"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Is this ok? (yes)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>此时目录中就有了package.json文件了</span><br></pre></td></tr></table></figure>
<h3 id="自己创建-package-json-文件，并修改内容"><a href="#自己创建-package-json-文件，并修改内容" class="headerlink" title="自己创建 package.json 文件，并修改内容"></a>自己创建 <code>package.json</code> 文件，并修改内容</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  # 在 npm 服务器中的名字，避免与 npm 已有项目重名。</span><br><span class="line">  "name": "react-native-zhb-actionsheet",</span><br><span class="line">  "version": "1.0.3",</span><br><span class="line">  "description": "react-native ActionSheet for Android and iOS",</span><br><span class="line">  # 待上传项目源文件位置</span><br><span class="line">  "main": "src/index.js",</span><br><span class="line">  # 通过 npm 可以下载的文件，避免下载多余文件</span><br><span class="line">  "files": [</span><br><span class="line">    <span class="string">"src"</span></span><br><span class="line">  ],</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"</span><br><span class="line">  &#125;,</span><br><span class="line">  # 仓库地址，这里是github</span><br><span class="line">  "repository": &#123;</span><br><span class="line">    "type": "git",</span><br><span class="line">    "url": "git+https://github.com/NoPPT/react-native-actionsheet.git"</span><br><span class="line">  &#125;,</span><br><span class="line">  # 搜索关键词</span><br><span class="line">  "keywords": [</span><br><span class="line">    "react-native",</span><br><span class="line">    "reactnative",</span><br><span class="line">    "rn",</span><br><span class="line">    "pickerview",</span><br><span class="line">    <span class="string">"actionsheet"</span></span><br><span class="line">  ],</span><br><span class="line">  "author": "zhuang",</span><br><span class="line">  "license": "MIT",</span><br><span class="line">  "bugs": &#123;</span><br><span class="line">    "url": "https://github.com/NoPPT/react-native-actionsheet/issues"</span><br><span class="line">  &#125;,</span><br><span class="line">  "homepage": "https://github.com/NoPPT/react-native-actionsheet#readme"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="创建-npm-账户"><a href="#创建-npm-账户" class="headerlink" title="创建 npm 账户"></a>创建 <code>npm</code> 账户</h2><ol>
<li><p>通过 <code>npm adduser</code> 命令创建用户。</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm adduser</span><br><span class="line">Username: test</span><br><span class="line">Password:</span><br><span class="line">Email: (this IS public) test@test.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>网页进行 <a href="https://www.npmjs.com/signup" target="_blank" rel="noopener">npm 注册</a>。</p>
</li>
</ol>
<h2 id="登录账户-npm-login"><a href="#登录账户-npm-login" class="headerlink" title="登录账户 npm login"></a>登录账户 <code>npm login</code></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> npm login</span><br><span class="line">Username: accountName</span><br><span class="line">Password:</span><br><span class="line">Email: (this IS public)</span><br></pre></td></tr></table></figure>
<h2 id="上传项目"><a href="#上传项目" class="headerlink" title="上传项目"></a>上传项目</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> npm publish</span><br></pre></td></tr></table></figure>
<h2 id="查看项目"><a href="#查看项目" class="headerlink" title="查看项目"></a>查看项目</h2><p>可以在 <code>https://npmjs.com/package/&lt;package&gt;</code> 查看项目是否已经添加到 <code>npm</code> 服务器。</p>
<h2 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h2><p><a href="https://docs.npmjs.com/getting-started/publishing-npm-packages" target="_blank" rel="noopener">Publishing npm packages</a></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序自定义组件实践</title>
    <url>/2018/04/01/weapp-custom-component-practices/</url>
    <content><![CDATA[<blockquote>
<p>从小程序基础库版本 1.6.3 开始，小程序支持简洁的组件化编程。所有自定义组件相关特性都需要基础库版本 1.6.3 或更高。<br>开发者可以将页面内的功能模块抽象成自定义组件，以便在不同的页面中重复使用；也可以将复杂的页面拆分成多个低耦合的模块，有助于代码维护。自定义组件在使用时与基础组件非常相似。</p>
</blockquote>
<p>作为一个小程序初学者，一开始看到<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/" target="_blank" rel="noopener">自定义组件</a>时，虽然文档已经写的很详细了，整体上都能看的懂，但看完之后感觉缺少实践理解不是很透彻，好在后来项目开发中需要自定义 PickerView，实践过后感觉熟练了不少，此时把开发过程中的一些实践配合官方文档总结下来。</p>
<a id="more"></a>
<h2 id="创建自定义组件"><a href="#创建自定义组件" class="headerlink" title="创建自定义组件"></a>创建自定义组件</h2><p>创建一个自定义组件十分简单，只需要在项目中点击<code>右键=&gt;新建=&gt;Component</code>，输入组件名，就会生成相应的 <code>json</code>，<code>wxml</code>，<code>wxss</code>，<code>js</code> 文件（为了方便管理，建议把自定义组件相关代码文件放在同一文件夹下面）。我们可以看到在 <code>json</code> 文件中已经将 <code>component</code> 属性设置为 <code>true</code>，代表这组文件为自定义组件。</p>
<figure class="highlight json"><figcaption><span>index.json</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"component"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"usingComponents"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同时，还要在 <code>wxml</code> 文件中编写组件模版，在 <code>wxss</code> 文件中加入组件样式，在 <code>js</code> 文件中写对应的组件逻辑。</p>
<p>接下来，就要考虑下组件需要实现哪些功能。这里要实现的是一个 <code>PickerView</code>。设计如下：<br><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="http://qiniu.0x0803.top/image/blog/2/1.png_blog" alt></div><div class="group-picture-column" style="width: 50%;"><img src="http://qiniu.0x0803.top/image/blog/2/2.png_blog" alt></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="http://qiniu.0x0803.top/image/blog/2/3.png_blog" alt></div><div class="group-picture-column" style="width: 50%;"><img src="http://qiniu.0x0803.top/image/blog/2/4.png_blog" alt></div></div></div></div></p>
<p>分析项目的实际需要，首先要有一套基本的样式，但是有些地方的高度不同，我们的项目只需要显示一列数据进行选择，暂时不需要级联的效果。需要单选和多选的功能，而且不同地方使用时对应的 <code>picker-item</code>（后面简称<code>行</code>） 显示的结构会有所不同。</p>
<p>总结下我们需要实现以下功能：</p>
<ul>
<li>默认样式和结构</li>
<li>打开和关闭</li>
<li>自定义样式</li>
<li>单选和多选</li>
<li>自动滑动到选中行</li>
<li>自定义行结构</li>
</ul>
<p>接下来就一一实现上面的需求。</p>
<h2 id="需求实现"><a href="#需求实现" class="headerlink" title="需求实现"></a>需求实现</h2><p>这里就把实现时的大概步骤和实现给记录下，所有的代码在这里可以<a href="https://github.com/NoPPT/wx-picker-view" target="_blank" rel="noopener">查看和下载</a>。</p>
<h3 id="默认样式和结构"><a href="#默认样式和结构" class="headerlink" title="默认样式和结构"></a>默认样式和结构</h3><p>按照以下目录创建文件，把所有相关的文件都放在同一文件夹下，方便统一管理，然后在文件夹下创建两个自定义组件和一个模板。<code>index</code> 提供整个 <code>picker-view</code> 相关的属性和事件。<code>item</code> 作为 <code>picker-item</code> 的容器，通过 <code>&lt;slot&gt;</code> 节点承载组件引用时的默认模板和自定义模板子节点，方便之后自定义行模板。<code>default-item</code> 就是 <code>picker-view</code> 默认的行模板了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── components</span><br><span class="line">│   └── picker</span><br><span class="line">│       ├── default-item.wxml</span><br><span class="line">│       ├── default-item.wxss</span><br><span class="line">│       ├── index.js</span><br><span class="line">│       ├── index.json</span><br><span class="line">│       ├── index.wxml</span><br><span class="line">│       ├── index.wxss</span><br><span class="line">│       ├── item.js</span><br><span class="line">│       ├── item.json</span><br><span class="line">│       ├── item.wxml</span><br><span class="line">│       └── item.wxss</span><br></pre></td></tr></table></figure>
<h3 id="打开和关闭"><a href="#打开和关闭" class="headerlink" title="打开和关闭"></a>打开和关闭</h3><p>简单点实现就是通过 <code>wx:if=&quot;&quot;</code>来判断是否显示组件，不过效果太生硬，还是要添加点动画效果，这里使用的是微信提供的 API：<a href="https://developers.weixin.qq.com/miniprogram/dev/api/api-animation.html#wxcreateanimationobject" target="_blank" rel="noopener">wx.createAnimation</a>。在 <code>index.js</code> 中添加组件属性 <code>show</code>，然后监听 <code>show</code> 值的变化，判断是打开还是关闭状态，执行不同的动画效果。这里有一点需要注意的是每次都需要重新使用 <code>wx.createAnimation</code> 生成动画实例，因为 <code>export</code> 方法每次调用后会清掉之前的动画操作。除设置 <code>show</code> 属性的值外，还可以在引用组件的地方通过 <code>selectComponent(&quot;#custom-id&quot;)</code> 方法获取组件实例节点，执行 <code>show()</code> 和 <code>hide()</code>方法来控制组件的显示状态。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// properties</span></span><br><span class="line">show: &#123;</span><br><span class="line">  type: <span class="built_in">Boolean</span>,</span><br><span class="line">  value: <span class="literal">false</span>,</span><br><span class="line">  observer: <span class="string">'_onChangeShow'</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// methods</span></span><br><span class="line">_onChangeShow: <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (newVal !== oldVal) &#123;</span><br><span class="line">    <span class="keyword">if</span> (newVal) &#123;</span><br><span class="line">      <span class="keyword">this</span>.show();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.hide();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">_initShowAnimate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> showAnimate = wx.createAnimation(&#123;</span><br><span class="line">    duration: that.animateTime,</span><br><span class="line">    timingFunction: <span class="string">'ease'</span></span><br><span class="line">  &#125;);</span><br><span class="line">  showAnimate.bottom(<span class="string">'0rpx'</span>).opacity(<span class="number">1</span>).step();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> bgShowAnimate = wx.createAnimation(&#123;</span><br><span class="line">    duration: that.animateTime,</span><br><span class="line">    timingFunction: <span class="string">'ease'</span></span><br><span class="line">  &#125;);</span><br><span class="line">  bgShowAnimate.backgroundColor(<span class="string">'rgba(0, 0, 0, 0.7)'</span>).step();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; showAnimate, bgShowAnimate &#125;;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">_initHideAnimate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> hideAnimate = wx.createAnimation(&#123;</span><br><span class="line">    duration: that.animateTime,</span><br><span class="line">    timingFunction: <span class="string">'ease'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  hideAnimate.bottom(<span class="string">'-586rpx'</span>).opacity(<span class="number">0</span>).step();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> bgHideAnimate = wx.createAnimation(&#123;</span><br><span class="line">    duration: that.animateTime,</span><br><span class="line">    timingFunction: <span class="string">'ease'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  bgHideAnimate.backgroundColor(<span class="string">'rgba(0, 0, 0, 0)'</span>).step();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; hideAnimate, bgHideAnimate &#125;;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">show: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; showAnimate, bgShowAnimate &#125; = <span class="keyword">this</span>._initShowAnimate();</span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    animation: showAnimate.export(),</span><br><span class="line">    bgAnimation: bgShowAnimate.export(),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">hide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.data.show) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> &#123; hideAnimate, bgHideAnimate &#125; = <span class="keyword">this</span>._initHideAnimate();</span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    animation: hideAnimate.export(),</span><br><span class="line">    bgAnimation: bgHideAnimate.export(),</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    that.triggerEvent(<span class="string">"hide"</span>, &#123;&#125;, &#123;&#125;)</span><br><span class="line">    that.setData(&#123;</span><br><span class="line">      show: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, that.animateTime);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>使用已注册的自定义组件前，首先要在页面的 <code>json</code> 文件中进行引用声明。此时需要提供每个自定义组件的标签名和对应的自定义组件文件路径。这样，在页面的 <code>wxml</code> 中就可以像使用基础组件一样使用自定义组件。节点名即自定义组件的标签名，节点属性即传递给组件的属性值。自定义组件的 <code>wxml</code> 节点结构在与数据结合之后，将被插入到引用位置内。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">// index.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"component"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"usingComponents"</span>: &#123;</span><br><span class="line">    <span class="attr">"item"</span>: <span class="string">"./item"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- item.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">'into-&#123;&#123;key&#125;&#125;'</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">bindtap</span>=<span class="string">'_onTapPickerItem'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>picker-item</code> 作为行模板的容器，绑定点击事件，这样就不用关心行结构，只需要处理好 <code>picker-item</code> 在点击时同 <code>picker-view</code> 之间的交互逻辑就好了。同样的，我们提供一个默认行模板，用于满足基本的使用需求。可以根据项目中的需求来决定默认的行模板。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- default-item.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">'default-item'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'default-item-container'</span> <span class="attr">style</span>=<span class="string">"background-color: &#123;&#123;choose ? '#2089ff' : '#fff'&#125;&#125;;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">'defaulte-item-text'</span> <span class="attr">style</span>=<span class="string">"color: &#123;&#123;choose ? '#fff' : '#333'&#125;&#125;"</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样，我们的 <code>picker-view</code> 的就如下所示：使用 <code>scroll-view</code> 组件作为承载 <code>picker-item</code> 的容器。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;show&#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"action-container"</span> <span class="attr">animation</span>=<span class="string">"&#123;&#123;bgAnimation&#125;&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"list-container"</span> <span class="attr">animation</span>=<span class="string">"&#123;&#123;animation&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"tool-bar"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">'cancel-text'</span> <span class="attr">bindtap</span>=<span class="string">'onTapClear'</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;multiple&#125;&#125;"</span> <span class="attr">class</span>=<span class="string">'all-text'</span> <span class="attr">bindtap</span>=<span class="string">'onTapAll'</span>&gt;</span>全选<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">'ok-text all-text'</span> <span class="attr">bindtap</span>=<span class="string">'onTapOk'</span>&gt;</span>确认<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">class</span>=<span class="string">'scroll'</span> <span class="attr">scroll-y</span> <span class="attr">scroll-into-view</span>=<span class="string">"&#123;&#123;defaultView&#125;&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">item</span> <span class="attr">id</span>=<span class="string">"&#123;&#123;'into-' + index&#125;&#125;"</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;items&#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"&#123;&#123;item.name&#125;&#125;"</span> <span class="attr">key</span>=<span class="string">"&#123;&#123;index&#125;&#125;"</span> <span class="attr">bindselect</span>=<span class="string">"onTapPickerItem"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"default-item"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123; choose: item.choose, title: item.name&#125;&#125;"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* index.wxss */</span></span><br><span class="line"><span class="selector-class">.action-container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">586</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">586</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1010</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.scroll</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">496</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h3><p>在微信提供的文档<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html" target="_blank" rel="noopener">组件模版和样式</a>中，提到可以在 <code>Component</code> 中用 <code>externalClasses</code> 定义段定义若干个外部样式类。这个特性从小程序基础库版本 <code>1.9.90</code> 开始支持。这里的话考虑到组件要支持低版本，而且 <code>externalClasses</code> 使用起来不够灵活。所以这里还是通过属性来实现自定义高度的需求。实践中发现的一个问题是，设置 <code>scroll-view</code> 的高度 <code>height: 100%</code> 虽然也能实现自动填充高度，但是在部分机型上展示有问题。所以还是监听高度属性的变化，然后计算 <code>scroll-view</code> 的高度，并更新。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// properties</span></span><br><span class="line">height: &#123;</span><br><span class="line">  type: <span class="built_in">String</span>,</span><br><span class="line">  value: <span class="string">'586rpx'</span>,</span><br><span class="line">  observer: <span class="string">'_onChangeHeight'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//methods</span></span><br><span class="line">_onChangeHeight: <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (newVal &amp;&amp; newVal !== oldVal) &#123;</span><br><span class="line">    <span class="keyword">const</span> height = (newVal.split(<span class="string">'rpx'</span>)[<span class="number">0</span>] - <span class="number">90</span>) + <span class="string">'rpx'</span>;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      containerHeight: height</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">//wxml</span></span><br><span class="line">&lt;scroll-view <span class="class"><span class="keyword">class</span></span>=<span class="string">'scroll'</span> style=<span class="string">"height: &#123;&#123;containerHeight&#125;&#125;;"</span> scroll-y&gt;</span><br><span class="line">&lt;<span class="regexp">/scroll-view&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="单选和多选"><a href="#单选和多选" class="headerlink" title="单选和多选"></a>单选和多选</h3><p>我们已经监听的 <code>picker-item</code> 的点击事件 <code>bindselect=&quot;onTapPickerItem&quot;</code>，只需要在每次点击时更新下当前行数据的选中状态。这里在实现时使用的方法是在每行的数据结构中增加 <code>choose</code> 属性用于存储行的选中状态。这样只需要处理好每次选中时数据的更新就好了，然后重新渲染组件。在取消的时候恢复原始的数据状态，点击确认时把当前的数据传递到使用 <code>picker-view</code> 的页面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line">onTapPickerItem: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.handleTapItem(res.detail.key);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">handleTapItem: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (index == <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">const</span> newDatas = <span class="keyword">this</span>._changeDataChoose(<span class="keyword">this</span>.selIndex, index);</span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    items: newDatas</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (that.data.custom) &#123;</span><br><span class="line">      that.changeSelectItem();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">onTapOk: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.changeSelectItem(<span class="string">'confirm'</span>);</span><br><span class="line">  <span class="keyword">this</span>.hide();</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">changeSelectItem: <span class="function"><span class="keyword">function</span> (<span class="params">type = <span class="string">'change'</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> items = <span class="keyword">this</span>.data.items;</span><br><span class="line">  <span class="keyword">let</span> current = <span class="keyword">this</span>.selIndex;</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="string">'cancel'</span>) &#123;</span><br><span class="line">    items = <span class="keyword">this</span>.defaultItems;</span><br><span class="line">    current = <span class="keyword">this</span>.defaultSelect;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'confirm'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.defaultItems = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">this</span>.defaultSelect = <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.triggerEvent(<span class="string">"change"</span>, &#123;</span><br><span class="line">    current,</span><br><span class="line">    items,</span><br><span class="line">    type</span><br><span class="line">  &#125;, &#123;&#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">_changeDataChoose: <span class="function"><span class="keyword">function</span> (<span class="params">lastIndex, currentIndex</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> lastDatas = <span class="keyword">this</span>.data.items;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.data.multiple) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> currentIndex != <span class="string">'object'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (lastDatas[currentIndex].choose) &#123;</span><br><span class="line">        lastDatas[currentIndex].choose = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">const</span> index = <span class="keyword">this</span>.selIndex.indexOf(currentIndex)</span><br><span class="line">        <span class="keyword">this</span>.selIndex.splice(index, <span class="number">1</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        lastDatas[currentIndex].choose = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.selIndex = [...this.selIndex, currentIndex];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.selIndex = lastIndex;</span><br><span class="line">      lastIndex.forEach(<span class="function">(<span class="params">value, index</span>) =&gt;</span> &#123;</span><br><span class="line">        lastDatas[value].choose = <span class="literal">true</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (lastIndex &gt;= <span class="number">0</span> &amp;&amp; lastIndex &lt; lastDatas.length) &#123;</span><br><span class="line">      lastDatas[lastIndex].choose = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (currentIndex &gt;= <span class="number">0</span> &amp;&amp; currentIndex &lt; lastDatas.length) &#123;</span><br><span class="line">      lastDatas[currentIndex].choose = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.selIndex = currentIndex;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lastDatas;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自动滑动到选中行"><a href="#自动滑动到选中行" class="headerlink" title="自动滑动到选中行"></a>自动滑动到选中行</h3><p>主要是使用 <code>scroll-view</code> 提供的属性 <code>scroll-into-view=&quot;&quot;</code>，在每次打开 <code>picker-view</code> 时设置 <code>defaultView</code> 的值为当前选中的行，需要注意的一点是 <code>scroll-into-view</code> 对应的值值应为某子元素 id，id 不能以数字开头。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">show: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; showAnimate, bgShowAnimate &#125; = <span class="keyword">this</span>._initShowAnimate();</span><br><span class="line">  <span class="keyword">const</span> defaultView = <span class="string">'into-'</span> + <span class="built_in">Number</span>(<span class="keyword">this</span>.data.current);</span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    animation: showAnimate.export(),</span><br><span class="line">    bgAnimation: bgShowAnimate.export(),</span><br><span class="line">    defaultView: defaultView</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h3 id="自定义行模板"><a href="#自定义行模板" class="headerlink" title="自定义行模板"></a>自定义行模板</h3><p>自定义行模板时主要需要处理的是，如何把选中的状态更新逻辑给抽取出来，这样使用时就只需要提供一套自定义的模板就行了。<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/relations.html" target="_blank" rel="noopener">组件间关系</a> 这一节提到：自定义组件有相互间的关系，相互间的通信往往比较复杂。此时在组件定义时加入 <code>relations</code> 定义段，可以解决这样的问题。在 <code>index</code> 和 <code>item</code> 两个组件定义中都加入 <code>relations</code>定义，<code>index</code> 作为父组件，在有 <code>linked</code> 子组建时更新下属性 <code>custom</code> 的值，作为是否使用自定义的行结构的标识。 <code>item</code> 作为子组件，在 <code>linked</code> 时保存父组件的引用，这样可以在有点击事件时调用对应的父组件里的方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line">relations: &#123;</span><br><span class="line">  <span class="string">'./item'</span>: &#123;</span><br><span class="line">    type: <span class="string">'child'</span>, <span class="comment">// 关联的目标节点应为子节点</span></span><br><span class="line">    linked: <span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 每次有item被插入时执行，target是该节点实例对象，触发在该节点attached生命周期之后</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.data.custom) &#123;</span><br><span class="line">        <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">          custom: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    linkChanged: <span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 每次有custom-li被移动后执行，target是该节点实例对象，触发在该节点moved生命周期之后</span></span><br><span class="line">    &#125;,</span><br><span class="line">    unlinked: <span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 每次有custom-li被移除时执行，target是该节点实例对象，触发在该节点detached生命周期之后</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// item.js</span></span><br><span class="line">relations: &#123;</span><br><span class="line">  <span class="string">'./index'</span>: &#123;</span><br><span class="line">    type: <span class="string">'parent'</span>, <span class="comment">// 关联的目标节点应为父节点</span></span><br><span class="line">    linked: <span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 每次被插入到custom-ul时执行，target是custom-ul节点实例对象，触发在attached生命周期之后</span></span><br><span class="line">      <span class="keyword">this</span>.parent = target;</span><br><span class="line">    &#125;,</span><br><span class="line">    linkChanged: <span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 每次被移动后执行，target是custom-ul节点实例对象，触发在moved生命周期之后</span></span><br><span class="line">    &#125;,</span><br><span class="line">    unlinked: <span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 每次被移除时执行，target是custom-ul节点实例对象，触发在detached生命周期之后</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// methods</span></span><br><span class="line">_onTapPickerItem: <span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.parent) &#123;</span><br><span class="line">    <span class="keyword">this</span>.parent.handleTapItem &amp;&amp; <span class="keyword">this</span>.parent.handleTapItem(<span class="keyword">this</span>.data.key);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.triggerEvent(<span class="string">'select'</span>, &#123;</span><br><span class="line">      key: <span class="keyword">this</span>.data.key</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改下 <code>index.wxml</code> 的结构。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;!custom&#125;&#125;"</span> <span class="attr">class</span>=<span class="string">'scroll'</span> <span class="attr">style</span>=<span class="string">"height: &#123;&#123;containerHeight&#125;&#125;;"</span> <span class="attr">scroll-y</span> <span class="attr">scroll-into-view</span>=<span class="string">"&#123;&#123;defaultView&#125;&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">id</span>=<span class="string">"&#123;&#123;'into-' + index&#125;&#125;"</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;items&#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"&#123;&#123;item.name&#125;&#125;"</span> <span class="attr">key</span>=<span class="string">"&#123;&#123;index&#125;&#125;"</span> <span class="attr">bindselect</span>=<span class="string">"onTapPickerItem"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"default-item"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123; choose: item.choose, title: item.name&#125;&#125;"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;custom&#125;&#125;"</span> <span class="attr">class</span>=<span class="string">'scroll'</span> <span class="attr">style</span>=<span class="string">"height: &#123;&#123;containerHeight&#125;&#125;;"</span> <span class="attr">scroll-y</span> <span class="attr">scroll-into-view</span>=<span class="string">"&#123;&#123;defaultView&#125;&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="使用自定义组件"><a href="#使用自定义组件" class="headerlink" title="使用自定义组件"></a>使用自定义组件</h2><p>在页面中使用自定义组件，首先在 <code>.json</code> 添加文件中引用：<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"usingComponents"</span>: &#123;</span><br><span class="line">    <span class="attr">"picker"</span>: <span class="string">"/components/picker/index"</span>,</span><br><span class="line">    // 如果需要自定义行结构就添加 item</span><br><span class="line">    "picker-item": "/components/picker/item"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    visible: <span class="literal">false</span>,</span><br><span class="line">    items: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'1'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'2'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'3'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'4'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'5'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'6'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'7'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'8'</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">    current: []</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  onTapShowActionSheet: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      visible: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  onChangeSelect: <span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      current: target.detail.current,</span><br><span class="line">      items: target.detail.items</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">'onTapShowActionSheet'</span>&gt;</span>显示ActionSheet<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">picker</span> <span class="attr">show</span>=<span class="string">"&#123;&#123;visible&#125;&#125;"</span> <span class="attr">bindchange</span>=<span class="string">"onChangeSelect"</span> <span class="attr">items</span>=<span class="string">"&#123;&#123;items&#125;&#125;"</span> <span class="attr">current</span>=<span class="string">"&#123;&#123;current&#125;&#125;"</span> <span class="attr">height</span>=<span class="string">"800rpx"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 如果需要自定义行结构就在这里添加 picker-item --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">picker-item</span> <span class="attr">id</span>=<span class="string">"into-&#123;&#123;index&#125;&#125;"</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;items&#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"&#123;&#123;index&#125;&#125;"</span> <span class="attr">key</span>=<span class="string">"&#123;&#123;index&#125;&#125;"</span> <span class="attr">cancel-style</span>=<span class="string">'cancel-style'</span> <span class="attr">ok-style</span>=<span class="string">'ok-style'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">block</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">"font-size: 40rpx; font-weight: bold; color: &#123;&#123; item.choose ? '#ff0000' : '#939393'&#125;&#125;"</span>&gt;</span>自定义-&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">"font-size: 40rpx; font-weight: bold; color: &#123;&#123; item.choose ? '#00ff00' : '#939393'&#125;&#125;"</span>&gt;</span>自定义-&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">"font-size: 40rpx; font-weight: bold; color: &#123;&#123; item.choose ? '#0000ff' : '#939393'&#125;&#125;"</span>&gt;</span>自定义-&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">picker-item</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 如果需要自定义行结构就在这里添加 picker-item --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用效果如下：</p>
<p><img src="http://qiniu.0x0803.top/image/blog/2/8.gif_gif" alt><br><img src="http://qiniu.0x0803.top/image/blog/2/7.gif_gif" alt></p>
<p>到这里的话，自定义的 <code>picker-view</code> 已经基本满足项目的需求了。不过还是有一些细节需要完善。想想也是头疼，在通用性和个性化之间想要平衡好还是很麻烦的。需要花费时间在实际应用中不断完善，最终才能打造出一套符合公司使用的组件库。不过在小公司大部分项目都在不久之后就停掉了，希望小程序这个项目能从 1.0.0 版本开始，坚持下来。</p>
<p>拖了这么久终于把这篇总结写完了，每次项目结束后都不想总结实践中遇到的问题，哎，懒癌啊~~~</p>
<p><a href="https://github.com/NoPPT/wx-picker-view" target="_blank" rel="noopener">完整代码在这里，点一下</a></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>自定义组件</tag>
        <tag>微信小程序</tag>
        <tag>实践</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 中表格使用及常见问题</title>
    <url>/2018/03/04/markdown-table-desc/</url>
    <content><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>用法很简单，如下写法就能快速生成一个表格，这里 <code>-</code> 至少有一个，<code>-</code> 的数量和列宽度没有关系。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| 标题 | 另一个标题 |</span><br><span class="line">| - | ---- |</span><br><span class="line">| 内容 | 另一个内容 |</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>标题</th>
<th>另一个标题</th>
</tr>
</thead>
<tbody>
<tr>
<td>内容</td>
<td>另一个内容</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p>如果要内容对齐的话，参考以下写法，简单来说就是：冒号在那边朝哪边对齐，两边都有就是居中了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| 默认(左对齐) | 左对齐 | 居中 | 右对齐 |</span><br><span class="line">| - | :- | :-: | -: |</span><br><span class="line">| 内容 | 内容 | 内容 | 内容 |</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>默认(左对齐)</th>
<th style="text-align:left">左对齐</th>
<th style="text-align:center">居中</th>
<th style="text-align:right">右对齐</th>
</tr>
</thead>
<tbody>
<tr>
<td>内容</td>
<td style="text-align:left">内容</td>
<td style="text-align:center">内容</td>
<td style="text-align:right">内容</td>
</tr>
</tbody>
</table>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="表格内换行"><a href="#表格内换行" class="headerlink" title="表格内换行"></a>表格内换行</h3><p>可以在内容中间插入 <code>&lt;br&gt;</code> 或者 <code>&lt;br/&gt;</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">列1 | 列2 </span><br><span class="line">--- | --- </span><br><span class="line">内容1 | 内容2&lt;br&gt;内容2&lt;br&gt;内容2</span><br><span class="line">内容1&lt;br/&gt;内容2&lt;br/&gt;内容2 | 内容2</span><br></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>列1</th>
<th>列2 </th>
</tr>
</thead>
<tbody>
<tr>
<td>内容1</td>
<td>内容2<br>内容2<br>内容2</td>
</tr>
<tr>
<td>内容1<br>内容2<br>内容2</td>
<td>内容2</td>
</tr>
</tbody>
</table>
<h3 id="表格列宽度调整"><a href="#表格列宽度调整" class="headerlink" title="表格列宽度调整"></a>表格列宽度调整</h3><p>在写表格中经常会出现某些列的由于内容较长，且没法自动换行遮盖住其他列，所以需要调整列的宽度，让表格显示的更美观。在 <code>&lt;table&gt;</code> 中表格的宽度由标题的 <code>&lt;th&gt;</code> 决定，我们只需要利用上 <a href="http://www.w3school.com.cn/cssref/selector_nth-of-type.asp" target="_blank" rel="noopener">CSS nth-of-type 选择器</a> 操作一番即可达到目的。要获取第一个 <code>&lt;th&gt;</code> 只需要 <code>th:nth-of-type(1)</code>就可以了，同理第二、三个使用 <code>th:nth-of-type(2)</code>、<code>th:nth-of-type(3)</code>，以此类推。 这种写法的缺点就很明显了，修改样式后会覆盖原有样式，而且所有的表格样式都发生了变化。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">th</span><span class="selector-pseudo">:nth-of-type(1)</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">th</span><span class="selector-pseudo">:nth-of-type(2)</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">th</span><span class="selector-pseudo">:nth-of-type(3)</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">th</span><span class="selector-pseudo">:nth-of-type(4)</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;!<span class="selector-tag">--</span> 下方是表格的 <span class="selector-tag">Markdown</span> 语法 <span class="selector-tag">--</span>!&gt;</span><br><span class="line">列1 | 列2 | 列3 | 列4</span><br><span class="line">--- | --- | --- | ---</span><br><span class="line">内容1 | 内容2 | 内容3 | 内容4</span><br><span class="line">内容1 | 内容2 | 内容3 | 内容4</span><br></pre></td></tr></table></figure>
<p>这样写后，表格的样式就如下所示：</p>
<style>
table th:nth-of-type(1) {
    width: 100px;
}
table th:nth-of-type(2) {
    width: 20%;
}
table th:nth-of-type(3) {
    width: 30%;
}
table th:nth-of-type(4) {
    width: 50%;
}
</style>

<table>
<thead>
<tr>
<th>列1</th>
<th>列2</th>
<th>列3</th>
<th>列4</th>
</tr>
</thead>
<tbody>
<tr>
<td>内容1</td>
<td>内容2</td>
<td>内容3</td>
<td>内容4</td>
</tr>
<tr>
<td>内容1</td>
<td>内容2</td>
<td>内容3</td>
<td>内容4</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native 项目使用 Jenkins 持续集成部署步骤</title>
    <url>/2018/03/03/react-native-app-ci-deploy/</url>
    <content><![CDATA[<p>App 开发过程中总是需要打包诸多版本提供测试部分进行测试，由于我们的 App 是使用 React Native 进行开发的，每次更新又分为热更新和安装包更新，如果每次都通过命令行进行热更新或者在本机上进行编译打包的话十分影响自己的工作效率。所以搭建一套持续集成环境把这些重复工作自动化就变的十分必要的了，持续集成的好处相信大家都了解了很多，只是搭建步骤比较繁琐，这里就把我之前使用 <a href="https://jenkins.io/" target="_blank" rel="noopener">Jenkins</a> 搭建持续集成环境的过程总结下来，留作参考。<br><a id="more"></a></p>
<p>开始之前总结一下哪些功能需要解决的一些问题：</p>
<ul>
<li>代码依赖问题。由于 Android 原生项目中会依赖一些三方库，所以在构建 Android 项目前，需要先执行用于下载依赖库的 Job。</li>
<li>热更新。由于需要热更新时并不需要重新构建原生安装包，所以把热更新当做一个单独的Job，这一部分主要是更新代码并执行热更新命令行。</li>
<li>Android 打包。这里把 Android 打包当做一个单独的 Job，为了满足自动化构建需要对原生项目做一些改进，包括三方库的依赖路径，以及一些构建参数，需要改成能接受外部传入参数。其余的可根据实际情况定制参数，比如我们项目同一份代码，需要分为三个不同的 logo，以及不同的接口地址进行分发，这时需要使用多渠道打包，所以我们的 Jenkins 也要根据情况传入自定义的参数。</li>
<li>iOS 打包。同样的 iOS 打包也是一个单独的 Job，iOS 项目没有直接接受外部传入参数的方法，这里我们可以在构建过程中，根据 Jenkins 参数，进行手动修改 plist 文件内的属性达到自定义属性的效果。同时配合在同一 workspace 下创建不同的 target 和 scheme 达到区分安装包的效果。</li>
<li>构建通知。由于打包需要消耗不少的时间，实时盯着进度显然不合适。所以我们需要在 Job 执行结束时发送邮件通知相关人员。</li>
</ul>
<p>综上所述，要实现以上的需求，直接使用 Jenkins 里面提供的打包插件实现起来并不方便。所以我这里把一些主要的操作都通过执行 shell 脚本实现。</p>
<h2 id="依赖环境"><a href="#依赖环境" class="headerlink" title="依赖环境"></a>依赖环境</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Jenkins 2.89.2</span><br><span class="line">macOS 10.13.2</span><br><span class="line">Xcode 9.2</span><br><span class="line">Gradle 2.14</span><br></pre></td></tr></table></figure>
<h2 id="Jenkins-基础配置"><a href="#Jenkins-基础配置" class="headerlink" title="Jenkins 基础配置"></a>Jenkins 基础配置</h2><h3 id="安装依赖插件"><a href="#安装依赖插件" class="headerlink" title="安装依赖插件"></a>安装依赖插件</h3><blockquote>
<p>路径：Jenkins =&gt; 系统管理 =&gt; 插件管理 =&gt; 可选插件 中搜索以下组件</p>
</blockquote>
<ul>
<li>GitLab Plugin</li>
<li>Email Extension Plugin</li>
<li>Gradle Plugin</li>
<li>Keychains and Provisioning Profiles Plugin</li>
</ul>
<h3 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h3><h4 id="Gradle-Plugin"><a href="#Gradle-Plugin" class="headerlink" title="Gradle Plugin"></a>Gradle Plugin</h4><blockquote>
<p>路径：Jenkins =&gt; 系统管理 =&gt; 全局工具配置 =&gt; Gradle</p>
</blockquote>
<p>设置 gradle 版本，并设置对应的路径，这里使用 <a href="https://downloads.gradle.org/distributions/gradle-2.14.1-all.zip" target="_blank" rel="noopener">2.14.1</a> 版本，一开始使用 3.0 以上版本在打包中报错 <code>GC overhead limit exceeded</code>，由于项目使用的就是 2.14.1 版本，为了方便就不更新项目 Gradle 版本了。</p>
<p><img src="http://qiniu.0x0803.top/image/blog/1/gradle_config.png_blog" alt="img"></p>
<h4 id="Keychains-and-Provisioning-Profiles-Plugin"><a href="#Keychains-and-Provisioning-Profiles-Plugin" class="headerlink" title="Keychains and Provisioning Profiles Plugin"></a>Keychains and Provisioning Profiles Plugin</h4><blockquote>
<p>路径：Jenkins =&gt; 系统管理 =&gt; Keychains and Provisioning Profiles Management</p>
</blockquote>
<p><img src="http://qiniu.0x0803.top/image/blog/1/keychains_provisioning_profiles.png_blog" alt="img"><br>这里需要上传两种类型的文件 .keychain 和 .mobileprovision</p>
<h5 id="上传-keychain-文件"><a href="#上传-keychain-文件" class="headerlink" title="上传 .keychain 文件"></a>上传 .keychain 文件</h5><ol>
<li>打开钥匙串访问，找到系统中已安装过证书的 .keychain 文件。一般为登录钥匙串下，系统中的文件位置为 /Users/username/Library/Keychains/login.keychain（系统在 10.12 以上可能由于升级系统找不到 login.keychain 文件，只有 login.keychain-db 文件，由于上传 .keychain-db 格式的会失败，此时可以复制 login.keychain-db 文件后重命名为 login.keychain 用于上传）。<br><img src="http://qiniu.0x0803.top/image/blog/1/keychains_cers.png_blog" alt="图1"></li>
<li>上传成功后，如图1，在黄框2中输入密码，一般为当前用户登录密码。 </li>
<li>点击黄框3中的 Add Code Signing Identity 按钮，在 Identities 中添加证书对应的标识，可以在钥匙串中查看常用名称,右键证书，点击显示简介:<br><img src="http://qiniu.0x0803.top/image/blog/1/cer_detail.png_blog" alt="img"></li>
</ol>
<h5 id="上传-mobileprovision-文件"><a href="#上传-mobileprovision-文件" class="headerlink" title="上传 .mobileprovision 文件"></a>上传 .mobileprovision 文件</h5><ol>
<li>设置 Provisionging Profiles Directory Path。主要用于存储上传的 .mobileprovision 文件, 一般为默认路径即可，如图1-黄框4</li>
<li>上传 .mobileprovision 文件。上传后可以看到如图1-黄框5，即代表上传成功</li>
</ol>
<h5 id="Email-Extension-Plugin"><a href="#Email-Extension-Plugin" class="headerlink" title="Email Extension Plugin"></a>Email Extension Plugin</h5><p>相较与默认提供的邮箱通知，Email Extension Plugin 提供的功能更强大 </p>
<ol>
<li>Default Recipients，配置默认的收件人</li>
<li>Default Subject，配置默认的邮件标题</li>
<li>Default Content，配置默认的邮件内容等<br><img src="http://qiniu.0x0803.top/image/blog/1/email_1.png_blog" alt="img"><br><img src="http://qiniu.0x0803.top/image/blog/1/email_2.png_blog" alt="img"><br><img src="http://qiniu.0x0803.top/image/blog/1/email_3.png_blog" alt="img"></li>
</ol>
<h5 id="保存配置"><a href="#保存配置" class="headerlink" title="保存配置"></a>保存配置</h5><h4 id="配置系统设置"><a href="#配置系统设置" class="headerlink" title="配置系统设置"></a>配置系统设置</h4><blockquote>
<p>路径：Jenkins =&gt; 系统管理 =&gt; 系统设置</p>
</blockquote>
<h5 id="配置全局属性"><a href="#配置全局属性" class="headerlink" title="配置全局属性"></a>配置全局属性</h5><blockquote>
<p>路径：Jenkins =&gt; 系统管理 =&gt; 系统设置 =&gt; 全局属性</p>
</blockquote>
<table>
<thead>
<tr>
<th>键</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr>
<td>PATH</td>
<td>通过 shell 命令 echo PATH 获取系统 PATH 的路径</td>
</tr>
<tr>
<td>ANDROID_HOME</td>
<td>设置 ANDROID_HOME， 如果项目中包含 local.properties 文件，可以不用设置，一般情况下 local.properties 会忽略上传到 git</td>
</tr>
</tbody>
</table>
<p><img src="http://qiniu.0x0803.top/image/blog/1/global_environment.png_blog" alt="img"></p>
<h5 id="配置邮件通知"><a href="#配置邮件通知" class="headerlink" title="配置邮件通知"></a>配置邮件通知</h5><p><img src="http://qiniu.0x0803.top/image/blog/1/email_server.png_blog" alt="img"></p>
<h2 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h2><h3 id="创建-job"><a href="#创建-job" class="headerlink" title="创建 job"></a>创建 job</h3><blockquote>
<p>路径：Jenkins =&gt; 新建<br>选择<code>构建一个自由风格的软件项目</code>，并输入任务名称，然后点确认。<br><img src="http://qiniu.0x0803.top/image/blog/1/add_job.png_blog" alt="img"></p>
</blockquote>
<h3 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h3><p><img src="http://qiniu.0x0803.top/image/blog/1/source_manager.png_blog" alt="img"></p>
<p>这里使用 git 管理代码，输入文件仓库路径，设置 Credentials，设置要构建的分支 Branches to build，这里我设置的是 <code>*/${BRANCH}</code>，为了偷懒我就不重新截图了，同样的源码管理这一步在后续的 Android 以及 iOS 构建也需要添加，不过步骤相同，后续也不重复了，- -！。</p>
<h3 id="参数化构建"><a href="#参数化构建" class="headerlink" title="参数化构建"></a>参数化构建</h3><p>需要自定义的参数要根据实际情况添加，不必要完全相同，我这里把我设置的都记录下来了。</p>
<style>
table th:nth-of-type(1) {
    width: 80px;
}
table th:nth-of-type(2) {
    width: 170px;
}
table th:nth-of-type(4) {
    width: 100px;
}
</style>

<table>
<thead>
<tr>
<th>类型</th>
<th>名字</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Choice Parameter</td>
<td>BRANCH</td>
<td>develop<br>master</td>
<td>代码分支</td>
</tr>
<tr>
<td>Boolean Parameter</td>
<td>CODE_PUSH</td>
<td>false</td>
<td>是否热更新此次推送</td>
</tr>
<tr>
<td>Choice Parameter</td>
<td>CODE_PUSH_TEST_ENV</td>
<td>test<br>master</td>
<td>推送服务器环境</td>
</tr>
<tr>
<td>Choice Parameter</td>
<td>CODE_PUSH_DEPLOY</td>
<td>all<br>ksd_shuttle<br>ksd_shuttle_ems<br>ksd_shuttle_sgr</td>
<td>推送哪些APP</td>
</tr>
<tr>
<td>Choice Parameter</td>
<td>CODE_PUSH_PLATFORM</td>
<td>all<br>android<br>ios</td>
<td>推送更新的设备类型</td>
</tr>
<tr>
<td>String Parameter</td>
<td>CODE_PUSH_DESC</td>
<td></td>
<td>推送内容信息</td>
</tr>
<tr>
<td>Boolean Parameter</td>
<td>CODE_PUSH_MAN</td>
<td>false</td>
<td>是否强制更新</td>
</tr>
</tbody>
</table>
<h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p><img src="http://qiniu.0x0803.top/image/blog/1/xcodebuild_shell.png_blog" alt="img"></p>
<p>根据具体情况执行一些初始化命令<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> codeinit.sh</span><br><span class="line"><span class="meta">#</span> 这个是通用的步骤,所以写在一个单据文件里面，方便执行</span><br><span class="line">yarn cache clean</span><br><span class="line">yarn install</span><br><span class="line">yarn upgrade</span><br><span class="line">git status</span><br><span class="line">git checkout .</span><br><span class="line">git status</span><br></pre></td></tr></table></figure></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> codepush.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 根据参数判断要热更新的环境，这里主要是写一个判断然后执行相应的命令行就好了</span><br><span class="line">if [[ $CODE_PUSH = true ]]; then</span><br><span class="line">    echo "=================code push start================="</span><br><span class="line">	if [[ $CODE_PUSH_TEST_ENV = 'test' ]]; then</span><br><span class="line">        codepushUrl="http://192.168.1.14:3000"</span><br><span class="line">        codepushKey=""</span><br><span class="line">    elif  [[ $CODE_PUSH_TEST_ENV = 'master' ]]; then</span><br><span class="line">        codepushUrl="http://master.com:3200"</span><br><span class="line">        codepushKey=""</span><br><span class="line">    else</span><br><span class="line">        codepushUrl="http://192.168.1.14:3000"</span><br><span class="line">        codepushKey=""</span><br><span class="line">    fi</span><br><span class="line">    echo "codepushUrl: " $&#123;codepushUrl&#125;</span><br><span class="line">    echo "codepushKey: " $&#123;codepushKey&#125;</span><br><span class="line"></span><br><span class="line">    code-push logout</span><br><span class="line">    echo $&#123;codepushKey&#125; | code-push login $&#123;codepushUrl&#125;</span><br><span class="line">	code-push app list</span><br><span class="line">    </span><br><span class="line">    if [[ $CODE_PUSH_PLATFORM = 'all' ]]; then</span><br><span class="line">        if [[ $CODE_PUSH_DEPLOY = 'all' ]]; then </span><br><span class="line">        else</span><br><span class="line">        code-push release-react $&#123;CODE_PUSH_DEPLOY&#125;-ios ios --plistFile ./ios/ksudi_courier_rn/Info.plist -d Production --description "$&#123;CODE_PUSH_DESC&#125;" --mandatory $&#123;CODE_PUSH_MAN&#125; --disabled true</span><br><span class="line">        code-push release-react $&#123;CODE_PUSH_DEPLOY&#125;-android android -d Production --description "$&#123;CODE_PUSH_DESC&#125;" --mandatory $&#123;CODE_PUSH_MAN&#125; --disabled true</span><br><span class="line">        fi</span><br><span class="line">    elif [[ $CODE_PUSH_PLATFORM = 'android' ]]; then</span><br><span class="line">        if [[ $CODE_PUSH_DEPLOY = 'all' ]]; then </span><br><span class="line">        else</span><br><span class="line">        code-push release-react $&#123;CODE_PUSH_DEPLOY&#125;-android android -d Production --description "$&#123;CODE_PUSH_DESC&#125;" --mandatory $&#123;CODE_PUSH_MAN&#125; --disabled true</span><br><span class="line">        fi</span><br><span class="line">    else</span><br><span class="line">        if [[ $CODE_PUSH_DEPLOY = 'all' ]]; then </span><br><span class="line">        else</span><br><span class="line">        code-push release-react $&#123;CODE_PUSH_DEPLOY&#125;-ios ios --plistFile ./ios/ksudi_courier_rn/Info.plist -d Production --description "$&#123;CODE_PUSH_DESC&#125;" --mandatory $&#123;CODE_PUSH_MAN&#125; --disabled true</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">    echo "=================code push success================="</span><br><span class="line">    exit 0</span><br><span class="line">else</span><br><span class="line">    echo "=================update code success, does not code push================="</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<h3 id="构建后操作"><a href="#构建后操作" class="headerlink" title="构建后操作"></a>构建后操作</h3><p><img src="http://qiniu.0x0803.top/image/blog/1/after_source_job.png_blog" alt="img"><br>可以通过设置构建后的操作，来实现不同的依赖关系，如当前项目依赖其他项目，可以在其他项目构建成功后执行当前项目（根据实际情况添加，这里有一点不是很满意的就是没法传入参数到后续项目）。</p>
<h2 id="构建-Android-安装包"><a href="#构建-Android-安装包" class="headerlink" title="构建 Android 安装包"></a>构建 Android 安装包</h2><h3 id="创建-job-1"><a href="#创建-job-1" class="headerlink" title="创建 job"></a>创建 job</h3><p>选择<code>构建一个自由风格的软件项目</code>，并输入任务名称，然后点确认。这里要创建两个，由于 Android 项目依赖的有其他三方库，所以要根据实际情况创建对应的下载代码的 Job。</p>
<h3 id="参数化构建-1"><a href="#参数化构建-1" class="headerlink" title="参数化构建"></a>参数化构建</h3><table>
<thead>
<tr>
<th>类型</th>
<th>名字</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Choice Parameter</td>
<td>BUILD_TYPE</td>
<td>Release<br>Debug</td>
<td>构建环境</td>
</tr>
<tr>
<td>Choice Parameter</td>
<td>PRODUCT_TYPE</td>
<td>Ksd<br>Ems<br>Sgr</td>
<td>安装包类型</td>
</tr>
<tr>
<td>String Parameter</td>
<td>APP_VERSION</td>
<td>1.0.0</td>
<td>安装包版本号（跟随代码设置）</td>
</tr>
<tr>
<td>String Parameter</td>
<td>APP_BUILD</td>
<td>1</td>
<td>安装包构建号（跟随代码设置）</td>
</tr>
<tr>
<td>String Parameter</td>
<td>APK_PATH</td>
<td>${WORKSPACE}/apk/</td>
<td>安装包输出路径</td>
</tr>
<tr>
<td>Extensible Choice</td>
<td>BUILD_TIME</td>
<td>return [new Date().format(‘yyyyMMdd’)]</td>
<td>构建时间</td>
</tr>
<tr>
<td>String Parameter</td>
<td>APK_NAME</td>
<td>ksd_shuttle_${BUILD_TIME}.apk</td>
<td>安装包名</td>
</tr>
<tr>
<td>Boolean Parameter</td>
<td>JENKINS_BUILD</td>
<td>true</td>
<td>是否为Jenkins打包</td>
</tr>
</tbody>
</table>
<h3 id="构建-1"><a href="#构建-1" class="headerlink" title="构建"></a>构建</h3><h4 id="Execute-shell"><a href="#Execute-shell" class="headerlink" title="Execute shell"></a>Execute shell</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh codeinit.sh</span><br></pre></td></tr></table></figure>
<h4 id="Invoke-Gradle-script"><a href="#Invoke-Gradle-script" class="headerlink" title="Invoke Gradle script"></a>Invoke Gradle script</h4><ol>
<li>Invoke Gradle 选中刚才添加的 2.14.1 版本</li>
<li>Use Gradle Wrapper 不需要选中，但是要配置信息</li>
<li>配置 Task 内容 <code>clean assemble${PRODUCT_TYPE}Release --stacktrace --info --debug</code></li>
<li>如果项目路径不在当前 workspace，则设置 Root Build script 到对应项目的 build.gradle 文件所在的文件夹<br><img src="http://qiniu.0x0803.top/image/blog/1/android_build.png_blog" alt="img"></li>
</ol>
<h4 id="Execute-shell-1"><a href="#Execute-shell-1" class="headerlink" title="Execute shell"></a>Execute shell</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> build_android.sh</span><br><span class="line"><span class="meta">#</span> 主要是把安装包上传到内网发布平台，可以根据情况上传至蒲公英或者 fir 等平台</span><br><span class="line">if [[ $&#123;PRODUCT_TYPE&#125; = 'Ksd' ]]; then</span><br><span class="line">    if [[ $&#123;IS_TEST_CODEPUSH&#125; = true ]]; then</span><br><span class="line">        APP_PLAT_ID=3</span><br><span class="line">    else</span><br><span class="line">        APP_PLAT_ID=4</span><br><span class="line">    fi</span><br><span class="line">elif [[ $&#123;PRODUCT_TYPE&#125; = 'Ems' ]]; then</span><br><span class="line">    if [[ $&#123;IS_TEST_CODEPUSH&#125; = true ]]; then</span><br><span class="line">        APP_PLAT_ID=7</span><br><span class="line">    else</span><br><span class="line">        APP_PLAT_ID=8</span><br><span class="line">    fi</span><br><span class="line">elif [[ $&#123;PRODUCT_TYPE&#125; = 'Sgr' ]]; then</span><br><span class="line">    if [[ $&#123;IS_TEST_CODEPUSH&#125; = true ]]; then</span><br><span class="line">        APP_PLAT_ID=11</span><br><span class="line">    else</span><br><span class="line">        APP_PLAT_ID=12</span><br><span class="line">    fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">curl --form plat_id=$&#123;APP_PLAT_ID&#125; --form file_nick_name=$&#123;APK_NAME&#125; --form token=b83ccaaa9dcef62d2d28cb030bc805fda2f1b03c --form file=@$&#123;APK_PATH&#125;/$&#123;APK_NAME&#125; https://192.168.1.38/api/pkgs</span><br></pre></td></tr></table></figure>
<h2 id="构建-iOS-安装包"><a href="#构建-iOS-安装包" class="headerlink" title="构建 iOS 安装包"></a>构建 iOS 安装包</h2><h3 id="创建-job-2"><a href="#创建-job-2" class="headerlink" title="创建 job"></a>创建 job</h3><p>选择<code>构建一个自由风格的软件项目</code>，并输入任务名称，然后点确认。</p>
<h3 id="参数化构建-2"><a href="#参数化构建-2" class="headerlink" title="参数化构建"></a>参数化构建</h3><table>
<thead>
<tr>
<th>类型</th>
<th>名字</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>String Parameter</td>
<td>APP_NAME</td>
<td>ksudi_courier_rn</td>
<td>.xcworkspace 文件对应的文件名</td>
</tr>
<tr>
<td>Choice Parameter</td>
<td>SCHEME</td>
<td>ksd_shuttle<br>ksd_shuttle_ems<br>ksd_shuttle_sgr</td>
<td>构建APP</td>
</tr>
<tr>
<td>String Parameter</td>
<td>PROJECT_PATH</td>
<td>${WORKSPACE}/../ksudi-courier-rn/ios</td>
<td>.xcworkspace文件对应的文件夹路径</td>
</tr>
<tr>
<td>String Parameter</td>
<td>IPA_PATH</td>
<td>${WORKSPACE}/ipa</td>
<td>ipa 包存放路径</td>
</tr>
<tr>
<td>String Parameter</td>
<td>ARCHIVE_PATH</td>
<td>${WORKSPACE}/archive</td>
<td>.archive 文件存放路径</td>
</tr>
<tr>
<td>Choice Parameter</td>
<td>EXPORT_METHOD</td>
<td>enterprise<br>development<br>ad-hoc<br>app-store</td>
<td>导出安装包的类型</td>
</tr>
<tr>
<td>String Parameter</td>
<td>BUNDLE_IDENTIFIER</td>
<td>com.company.bundleid</td>
<td>唯一标识</td>
</tr>
<tr>
<td>String Parameter</td>
<td>TEAM_ID</td>
<td></td>
<td>证书对应的TeamID（图三-组织单位） </td>
</tr>
</tbody>
</table>
<h3 id="构建环境"><a href="#构建环境" class="headerlink" title="构建环境"></a>构建环境</h3><ol>
<li>选中当前项目对应的签名证书</li>
<li>选中当前项目对应的 provisioning profile 文件</li>
<li>Variable Prefix 根据 Code Signing Identity 和 provisioning profile 对应的安装包信息添加 DIS 或 DEV 前缀</li>
</ol>
<p><img src="http://qiniu.0x0803.top/image/blog/1/keychain_config.png_blog" alt="img"></p>
<h3 id="构建-2"><a href="#构建-2" class="headerlink" title="构建"></a>构建</h3><p>增加构建步骤，选中 Execute shell，并配置如下，执行 shell 文件或直接把 shell 命令赋值到 Command 中</p>
<p><img src="http://qiniu.0x0803.top/image/blog/1/xcodebuild_shell.png_blog" alt="img"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh codeinit.sh</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> build_ios.sh</span><br><span class="line">echo "=================app info================="</span><br><span class="line">PLIST_PATH="$&#123;PROJECT_PATH&#125;/$&#123;APP_NAME&#125;/Info.plist"</span><br><span class="line">echo "PLIST_PATH:" $&#123;PLIST_PATH&#125;</span><br><span class="line"><span class="meta">#</span>取版本号</span><br><span class="line">bundleShortVersion=$(/usr/libexec/PlistBuddy -c "print CFBundleShortVersionString" "$&#123;PLIST_PATH&#125;")</span><br><span class="line">echo "bundleShortVersion:" $&#123;bundleShortVersion&#125;</span><br><span class="line"><span class="meta">#</span>取build值</span><br><span class="line">bundleVersion=$(/usr/libexec/PlistBuddy -c "print CFBundleVersion" "$&#123;PLIST_PATH&#125;")</span><br><span class="line">echo "bundleVersion:" $&#123;bundleVersion&#125;</span><br><span class="line"><span class="meta">#</span>bundle id</span><br><span class="line">bundleId=$&#123;BUNDLE_IDENTIFIER&#125;</span><br><span class="line">echo "bundleId:" $&#123;bundleId&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 根据不同环境设置不同的安装包上传地址，以及不同的证书文件。</span><br><span class="line">if [[ $&#123;EXPORT_METHOD&#125; = 'enterprise' || $&#123;EXPORT_METHOD&#125; = 'app-store' ]]; then</span><br><span class="line">    PROVISIONING_PROFILE=$&#123;DIS_PROVISIONING_PROFILE&#125;</span><br><span class="line">    CODE_SIGNING_IDENTITY=$&#123;DIS_CODE_SIGNING_IDENTITY&#125;</span><br><span class="line">    KEYCHAIN_PASSWORD=$&#123;DIS_KEYCHAIN_PASSWORD&#125;</span><br><span class="line">    KEYCHAIN_PATH=$&#123;DIS_KEYCHAIN_PATH&#125;</span><br><span class="line">    BUILD_CONFIG='Release'</span><br><span class="line">    if [[ $&#123;SCHEME&#125; = 'ksd_shuttle_ems' ]]; then</span><br><span class="line">        APP_PLAT_ID=6</span><br><span class="line">    elif [[ $&#123;SCHEME&#125; = 'ksd_shuttle' ]]; then</span><br><span class="line">        APP_PLAT_ID=2</span><br><span class="line">    elif [[ $&#123;SCHEME&#125; = 'ksd_shuttle_sgr' ]]; then</span><br><span class="line">        APP_PLAT_ID=10</span><br><span class="line">    fi</span><br><span class="line">elif [ $&#123;EXPORT_METHOD&#125; = 'ad-hoc' ]; then </span><br><span class="line">    PROVISIONING_PROFILE=$&#123;DIS_PROVISIONING_PROFILE&#125;</span><br><span class="line">    CODE_SIGNING_IDENTITY=$&#123;DIS_CODE_SIGNING_IDENTITY&#125;</span><br><span class="line">    KEYCHAIN_PASSWORD=$&#123;DIS_KEYCHAIN_PASSWORD&#125;</span><br><span class="line">    KEYCHAIN_PATH=$&#123;DIS_KEYCHAIN_PATH&#125;</span><br><span class="line">    BUILD_CONFIG='Release'</span><br><span class="line">    if [[ $&#123;SCHEME&#125; = 'ksd_shuttle_ems' ]]; then</span><br><span class="line">        APP_PLAT_ID=5</span><br><span class="line">    elif [[ $&#123;SCHEME&#125; = 'ksd_shuttle' ]]; then</span><br><span class="line">        APP_PLAT_ID=1</span><br><span class="line">    elif [[ $&#123;SCHEME&#125; = 'ksd_shuttle_sgr' ]]; then</span><br><span class="line">        APP_PLAT_ID=9</span><br><span class="line">    fi</span><br><span class="line">else</span><br><span class="line">    PROVISIONING_PROFILE=$&#123;DEV_PROVISIONING_PROFILE&#125;</span><br><span class="line">    CODE_SIGNING_IDENTITY=$&#123;DEV_CODE_SIGNING_IDENTITY&#125;</span><br><span class="line">    KEYCHAIN_PASSWORD=$&#123;DEV_KEYCHAIN_PASSWORD&#125;</span><br><span class="line">    KEYCHAIN_PATH=$&#123;DEV_KEYCHAIN_PATH&#125;</span><br><span class="line">    BUILD_CONFIG='Debug'</span><br><span class="line">    if [[ $&#123;SCHEME&#125; = 'ksd_shuttle_ems' ]]; then</span><br><span class="line">        APP_PLAT_ID=5</span><br><span class="line">    elif [[ $&#123;SCHEME&#125; = 'ksd_shuttle' ]]; then</span><br><span class="line">        APP_PLAT_ID=1</span><br><span class="line">    elif [[ $&#123;SCHEME&#125; = 'ksd_shuttle_sgr' ]]; then</span><br><span class="line">        APP_PLAT_ID=9</span><br><span class="line">    fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 配置打包是需要的 plist 文件，</span><br><span class="line">EXPORT_PLIST_TEMPLATE="&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;&lt;plist version=\"1.0\"&gt;&lt;dict&gt;&lt;key&gt;compileBitcode&lt;/key&gt;&lt;false/&gt;&lt;key&gt;method&lt;/key&gt;&lt;string&gt;$&#123;EXPORT_METHOD&#125;&lt;/string&gt;&lt;key&gt;provisioningProfiles&lt;/key&gt;&lt;dict&gt;&lt;key&gt;$&#123;bundleId&#125;&lt;/key&gt;&lt;string&gt;$&#123;PROVISIONING_PROFILE&#125;&lt;/string&gt;&lt;/dict&gt;&lt;key&gt;signingStyle&lt;/key&gt;&lt;string&gt;manual&lt;/string&gt;&lt;key&gt;stripSwiftSymbols&lt;/key&gt;&lt;true/&gt;&lt;key&gt;teamID&lt;/key&gt;&lt;string&gt;$&#123;TEAM_ID&#125;&lt;/string&gt;&lt;key&gt;thinning&lt;/key&gt;&lt;string&gt;&amp;lt;none&amp;gt;&lt;/string&gt;&lt;/dict&gt;&lt;/plist&gt;"</span><br><span class="line">echo "=================export info================="</span><br><span class="line">EXPORT_PLIST_PATH="$&#123;WORKSPACE&#125;/ExportOptions.plist"</span><br><span class="line">echo "EXPORT_PLIST_TEMPLATE:" $&#123;EXPORT_PLIST_TEMPLATE&#125;</span><br><span class="line">echo $&#123;EXPORT_PLIST_TEMPLATE&#125; &gt; $&#123;EXPORT_PLIST_PATH&#125;</span><br><span class="line"></span><br><span class="line">DATE="$(date +%Y%m%d)"</span><br><span class="line">echo "DATE:" $&#123;DATE&#125;</span><br><span class="line">echo "IPA_PATH:" $&#123;IPA_PATH&#125;</span><br><span class="line">echo "ARCHIVE_PATH:" $&#123;ARCHIVE_PATH&#125;</span><br><span class="line">ARCHIVE_FILE_PATH="$&#123;ARCHIVE_PATH&#125;/$&#123;APP_NAME&#125;.xcarchive"</span><br><span class="line">echo "ARCHIVE_FILE_PATH:" $&#123;ARCHIVE_FILE_PATH&#125;</span><br><span class="line"></span><br><span class="line">export LANG=en_US.UTF-8</span><br><span class="line">echo "=================unlock keychain================="</span><br><span class="line">/usr/bin/security list-keychains -s $&#123;KEYCHAIN_PATH&#125;</span><br><span class="line">/usr/bin/security default-keychain -d user -s $&#123;KEYCHAIN_PATH&#125;</span><br><span class="line"><span class="meta">#</span> 解锁 keychain</span><br><span class="line">/usr/bin/security unlock-keychain -p $&#123;KEYCHAIN_PASSWORD&#125; $&#123;KEYCHAIN_PATH&#125; </span><br><span class="line">/usr/bin/security set-keychain-settings -t 3600 -l $&#123;KEYCHAIN_PATH&#125;</span><br><span class="line">/usr/bin/security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $&#123;KEYCHAIN_PASSWORD&#125; $&#123;KEYCHAIN_PATH&#125;</span><br><span class="line"><span class="meta">#</span> /usr/bin/security set-key-partition-list -S apple-tool:,apple: -s -k $&#123;KEYCHAIN_PASSWORD&#125; $&#123;KEYCHAIN_PATH&#125;</span><br><span class="line">/usr/bin/security show-keychain-info $&#123;KEYCHAIN_PATH&#125;</span><br><span class="line">/usr/bin/security find-identity -p codesigning -v</span><br><span class="line"></span><br><span class="line">echo "=================update pods================="</span><br><span class="line">cd $&#123;PROJECT_PATH&#125;</span><br><span class="line">pod update --no-repo-update</span><br><span class="line"></span><br><span class="line">echo "=================xcodebuild command start================="</span><br><span class="line">chmod -R 777 $&#123;PROJECT_PATH&#125;/../node_modules/react-native</span><br><span class="line">xcodebuild -version</span><br><span class="line">xcodebuild -showsdks</span><br><span class="line"></span><br><span class="line">echo "=================list================="</span><br><span class="line">xcodebuild -list -workspace "$&#123;PROJECT_PATH&#125;/$&#123;APP_NAME&#125;.xcworkspace"</span><br><span class="line"></span><br><span class="line">echo "=================clean================="</span><br><span class="line">xcodebuild -workspace "$&#123;PROJECT_PATH&#125;/$&#123;APP_NAME&#125;.xcworkspace" -scheme "$&#123;SCHEME&#125;" -configuration "$&#123;BUILD_CONFIG&#125;" clean</span><br><span class="line"></span><br><span class="line">echo "=================archive================="</span><br><span class="line">xcodebuild archive -workspace "$&#123;PROJECT_PATH&#125;/$&#123;APP_NAME&#125;.xcworkspace" -scheme "$&#123;SCHEME&#125;" -sdk iphoneos -configuration "$&#123;BUILD_CONFIG&#125;" -archivePath "$&#123;ARCHIVE_FILE_PATH&#125;" CODE_SIGN_IDENTITY="$&#123;CODE_SIGNING_IDENTITY&#125;" PROVISIONING_PROFILE="$&#123;PROVISIONING_PROFILE&#125;"</span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">    echo "=================archive success================="</span><br><span class="line">else</span><br><span class="line">    echo "=================archive failure================="</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo "=================export================="</span><br><span class="line">xcodebuild -exportArchive -archivePath "$&#123;ARCHIVE_FILE_PATH&#125;" -exportPath "$&#123;IPA_PATH&#125;" -exportOptionsPlist "$&#123;EXPORT_PLIST_PATH&#125;"</span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">    echo "=================export success================="</span><br><span class="line">else</span><br><span class="line">    echo "=================export failure================="</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo "=================rename ipa================="</span><br><span class="line">IPANAME="$&#123;SCHEME&#125;_V$&#123;bundleShortVersion&#125;_$&#123;DATE&#125;.ipa"</span><br><span class="line">echo "IPANAME:" $&#123;IPANAME&#125;</span><br><span class="line">mv "$&#123;IPA_PATH&#125;/$&#123;SCHEME&#125;.ipa" "$&#123;IPA_PATH&#125;/$&#123;IPANAME&#125;" </span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">    echo "=================rename success================="</span><br><span class="line">else</span><br><span class="line">    echo "=================rename failure================="</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 上传安装包到内网发布平台</span><br><span class="line">curl --form plat_id=$&#123;APP_PLAT_ID&#125; --form file_nick_name=$&#123;IPANAME&#125; --form token=b83ccaaa9dcef62d2d28cb030bc805fda2f1b03c --form file=@$&#123;IPA_PATH&#125;/$&#123;IPANAME&#125; https://192.168.1.38/api/pkgs</span><br></pre></td></tr></table></figure>
<h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p>如果 archive 过程报如下错误，是因为每次签名都需要权限，没有找到通过命令行解决的办法，解决方法是用 Xcode 打开项目并打包，在最后会提示 是否允许 codesign 获取钥匙串权限 点击始终允许，然后就不会出如下错误了。或者如脚本中设置权限，并在钥匙串中双击密钥，然后修改访问控制为允许所有应用程序访问项目。</p>
<p><img src="http://qiniu.0x0803.top/image/blog/1/change_key_info.png_blog" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 遇到的错误信息</span><br><span class="line">/usr/bin/codesign --force --sign BECCC467849A21A6C3090FF3913F38BE5C25171A --entitlements /Users/ksudi/Library/Developer/Xcode/DerivedData/ksudi_courier_rn-ghscruhcynnsgeaxehveiqyurbpm/Build/Intermediates.noindex/ArchiveIntermediates/ksd_shuttle/IntermediateBuildFilesPath/ksudi_courier_rn.build/Release-iphoneos/ksd_shuttle.build/ksd_shuttle.app.xcent --timestamp=none /Users/ksudi/Library/Developer/Xcode/DerivedData/ksudi_courier_rn-ghscruhcynnsgeaxehveiqyurbpm/Build/Intermediates.noindex/ArchiveIntermediates/ksd_shuttle/InstallationBuildProductsLocation/Applications/ksd_shuttle.app</span><br><span class="line">/Users/ksudi/Library/Developer/Xcode/DerivedData/ksudi_courier_rn-ghscruhcynnsgeaxehveiqyurbpm/Build/Intermediates.noindex/ArchiveIntermediates/ksd_shuttle/InstallationBuildProductsLocation/Applications/ksd_shuttle.app: unknown error -1=ffffffffffffffff</span><br><span class="line">Command /usr/bin/codesign failed with exit code 1</span><br><span class="line"></span><br><span class="line">** ARCHIVE FAILED **</span><br></pre></td></tr></table></figure>
<h2 id="配置构建成功后操作"><a href="#配置构建成功后操作" class="headerlink" title="配置构建成功后操作"></a>配置构建成功后操作</h2><h3 id="邮件通知模板"><a href="#邮件通知模板" class="headerlink" title="邮件通知模板"></a>邮件通知模板</h3><p>这里主要使用 HTML 写邮件模板，需要根据不同 Job 定义不同的模板，这里提供一个参考。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>$&#123;ENV, var="JOB_NAME"&#125;-第$&#123;BUILD_NUMBER&#125;次构建日志<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">leftmargin</span>=<span class="string">"8"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">topmargin</span>=<span class="string">"8"</span> <span class="attr">marginheight</span>=<span class="string">"4"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">offset</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"95%"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#0B610B"</span>&gt;</span>构建信息<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">align</span>=<span class="string">"center"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目名称：$&#123;PROJECT_NAME&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建编号：第$&#123;BUILD_NUMBER&#125;次构建<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>APP 名称：$&#123;APP_NAME&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>APP 标识：$&#123;BUNDLE_IDENTIFIER&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>安装包类型：$&#123;EXPORT_METHOD&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建日志：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;BUILD_URL&#125;console"</span>&gt;</span>$&#123;BUILD_URL&#125;console<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建 Url：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;BUILD_URL&#125;"</span>&gt;</span>$&#123;BUILD_URL&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目 Url：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;PROJECT_URL&#125;"</span>&gt;</span>$&#123;PROJECT_URL&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#0B610B"</span>&gt;</span>变更集<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">align</span>=<span class="string">"center"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;JELLY_SCRIPT,template="html"&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">align</span>=<span class="string">"center"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="添加-Editable-Email-Notification"><a href="#添加-Editable-Email-Notification" class="headerlink" title="添加 Editable Email Notification"></a>添加 Editable Email Notification</h3><p>如果需要发送邮件的构建 job，则在构建后操作中添加 Editable Email Notification<br><img src="http://qiniu.0x0803.top/image/blog/1/after_build.png_blog" alt="img"></p>
<h3 id="配置基础信息"><a href="#配置基础信息" class="headerlink" title="配置基础信息"></a>配置基础信息</h3><ul>
<li>如果需要发送附件和 attach build log 在这里选中，默认是不发送<br><img src="http://qiniu.0x0803.top/image/blog/1/attach_info.png_blog" alt="img"></li>
<li>Triggers 中配置接受者信息，默认是 Developers 需要自己添加配置的 Recipient List，根据自己实际情况而定<br><img src="http://qiniu.0x0803.top/image/blog/1/triggers.png_blog" alt="img"></li>
<li>Triggers 中默认的响应构建状态为在插件中配置的信息，如果需要自定义，点击 Add Trigger 添加需要的构建状态<br><img src="http://qiniu.0x0803.top/image/blog/1/add_triggers.png_blog" alt="img"></li>
</ul>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>感谢大家能够一路看下来，以上就是我在搭建持续部署环境时主要的一些步骤，写的比较乱，可能会有一些步骤写的比较简单，可能对于一些项目这样搭建起来过于麻烦，不过对于我们公司的项目是目前我能想到的相对简单可行的方法了。希望对大家能起到一点帮助~~~</p>
]]></content>
      <categories>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>CI</tag>
        <tag>Jenkins</tag>
        <tag>React Native</tag>
      </tags>
  </entry>
  <entry>
    <title>Code Push 服务器搭建以及集成方式</title>
    <url>/2018/02/28/react-native-code-push/</url>
    <content><![CDATA[<p>前段时间推动公司使用 React Native 技术把 APP 给重写了，到现在已经稳定运行了一段时间。期间踩了很多坑，其中之一就是热更新服务器的选型与搭建，现在把热更新服务器的搭建简单总结一下。搭建之前调研了比较流行两种的方案：微软的 <a href="http://microsoft.github.io/code-push/" target="_blank" rel="noopener">CodePush</a> 以及 React Native 中文网的 <a href="http://update.reactnative.cn/home" target="_blank" rel="noopener">pushy</a>。虽说集成很简单，不用自己搭建后台，但是作为公司项目使用的话，把更新服务寄希望于不可控平台不是很合适。最终还是在 GitHub 上找到了一个开源并且很好用的项目 <a href="https://github.com/lisong/code-push-server" target="_blank" rel="noopener">code-push-server</a> 稍加改动后就基本满足目前项目使用需求。</p>
<a id="more"></a>
<h2 id="服务器搭建"><a href="#服务器搭建" class="headerlink" title="服务器搭建"></a>服务器搭建</h2><h3 id="依赖环境"><a href="#依赖环境" class="headerlink" title="依赖环境"></a>依赖环境</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">Python 2.7.10</span><br><span class="line">node v6.9.1</span><br><span class="line">npm 4.0.2</span><br><span class="line">C++ 11</span><br><span class="line">mysql 5.7.16</span><br></pre></td></tr></table></figure>
<h3 id="下载源码文件"><a href="#下载源码文件" class="headerlink" title="下载源码文件"></a>下载源码文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git clone https://github.com/lisong/code-push-server.git</span><br></pre></td></tr></table></figure>
<h3 id="修改配置信息-config-config-js"><a href="#修改配置信息-config-config-js" class="headerlink" title="修改配置信息 ./config/config.js"></a>修改配置信息 ./config/config.js</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">// 修改数据库连接信息</span><br><span class="line">db: &#123;</span><br><span class="line">    username: process.env.RDS_USERNAME || "root", //db帐号</span><br><span class="line">    password: process.env.RDS_PASSWORD || null, //密码</span><br><span class="line">    database: process.env.DATA_BASE || "codepush", //数据库名，默认codepush</span><br><span class="line">    host: process.env.RDS_HOST || "127.0.0.1", //db host</span><br><span class="line">    port: process.env.RDS_PORT || 3306, //db port</span><br><span class="line">&#125;,</span><br><span class="line">// 配置文件存储信息</span><br><span class="line">local: &#123;</span><br><span class="line">    // 待更新文件存储路径</span><br><span class="line">    storageDir: process.env.STORAGE_DIR || "/path/to/storage",</span><br><span class="line">    // 待更新文件（storageDir路径）的下载地址, CodePush Server 地址 + '/download'</span><br><span class="line">    // 地址请根据实际情况填写，我这里是 http://192.168.1.3:3000</span><br><span class="line">    downloadUrl: process.env.LOCAL_DOWNLOAD_URL || "http://192.168.1.3:3000/download",</span><br><span class="line">    // downloadUrl对应的下载文件存储的地址.</span><br><span class="line">    public: process.env.PUBLIC || '/path/to/download'</span><br><span class="line">&#125;,</span><br><span class="line">jwt: &#123;</span><br><span class="line">    // Recommended: 63 random alpha-numeric characters</span><br><span class="line">    // Generate using: https://www.grc.com/passwords.htm</span><br><span class="line">    tokenSecret: process.env.TOKEN_SECRET ||'INSERT_RANDOM_TOKEN_KEY'</span><br><span class="line">&#125;,</span><br><span class="line">common: &#123;</span><br><span class="line">    tryLoginTimes: 5,</span><br><span class="line">    // 临时文件存储路径.</span><br><span class="line">    dataDir: process.env.DATA_DIR || "/path/to/data",</span><br><span class="line">&#125;,</span><br><span class="line">//这里配置邮箱信息</span><br><span class="line">smtpConfig:&#123;</span><br><span class="line">    host: "mail.ksudi.com",</span><br><span class="line">    port: 25,</span><br><span class="line">    secure: false,</span><br><span class="line">    auth: &#123;</span><br><span class="line">      user: "developer@mail.com",</span><br><span class="line">      pass: "password"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">redis: &#123;</span><br><span class="line">    default: &#123;</span><br><span class="line">      host: "127.0.0.1",</span><br><span class="line">      port: 6379,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> cd code-push-server</span><br><span class="line"><span class="meta">$</span> npm install</span><br><span class="line"><span class="meta">$</span> ./bin/db init #初始化mysql数据库</span><br><span class="line">--dbname	[默认值: "codepush"]</span><br><span class="line">--dbhost	[默认值: "localhost"]</span><br><span class="line">--dbuser	[默认值: "root"]</span><br><span class="line">--dbpassword	[默认值: "root"]</span><br><span class="line">eg: ./bin/db init --dbname codepush --dbhost localhost --dbuser root --dbpassword 123456</span><br></pre></td></tr></table></figure>
<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><h4 id="直接启动服务"><a href="#直接启动服务" class="headerlink" title="直接启动服务"></a>直接启动服务</h4><p>直接启动服务可以及时查看日志，但进程容易 crash，服务器地址为 <a href="http://127.0.0.1:3000/" target="_blank" rel="noopener">http://127.0.0.1:3000/</a> 如果本地开发建议使用此方法，正式环境使用 pm2 启动项目<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> ./bin/www #启动服务</span><br></pre></td></tr></table></figure></p>
<h4 id="使用-pm2-管理"><a href="#使用-pm2-管理" class="headerlink" title="使用 pm2 管理"></a>使用 <a href="http://pm2.keymetrics.io" target="_blank" rel="noopener">pm2</a> 管理</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">// 1. 修改 ./docs/process.json 文件</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"apps"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>      : <span class="string">"code-push-server"</span>,</span><br><span class="line">            <span class="attr">"max_memory_restart"</span> : <span class="string">"300M"</span>,</span><br><span class="line">            "script"    : "../bin/www", //path/to/www</span><br><span class="line">            "instances"  : "max", //开启实例数量，max为cpu核数</span><br><span class="line">            "exec_mode"  : "cluster", //集群模式，最大提升网站并发</span><br><span class="line">            "env" : &#123;</span><br><span class="line">                "NODE_ENV" : "production",</span><br><span class="line">                "PORT" : 3000,</span><br><span class="line">                "CONFIG_FILE" : "../config/config.js" // /path/to/config.js</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 2. 安装 pm2</span><br><span class="line">$ npm install pm2 -g</span><br><span class="line">$ pm2 start path/to/process.json</span><br><span class="line"></span><br><span class="line">// 3. 更多 pm2 命令</span><br><span class="line">$ pm2 stop [options] &lt;id|name|all|json|stdin...&gt;  关闭服务</span><br><span class="line">$ pm2 list 查看所有</span><br><span class="line">$ pm2 show &lt;id&gt; 查看某个服务的信息</span><br></pre></td></tr></table></figure>
<p>此时热更新服务器已经部署完成，接下来介绍 APP 内集成方式以及发布和管理更新的常用命令。</p>
<h2 id="APP-集成"><a href="#APP-集成" class="headerlink" title="APP 集成"></a>APP 集成</h2><h3 id="安装-react-native-code-push"><a href="#安装-react-native-code-push" class="headerlink" title="安装 react-native-code-push"></a>安装 <a href="https://github.com/Microsoft/react-native-code-push" target="_blank" rel="noopener">react-native-code-push</a></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> npm install react-native-code-push@latest --save</span><br></pre></td></tr></table></figure>
<h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><h4 id="修改-plist-配置文件"><a href="#修改-plist-配置文件" class="headerlink" title="修改 plist 配置文件"></a>修改 plist 配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">key: CodePushServerURL value: CodePush 服务地址</span><br><span class="line">key: CodePushDeploymentKey value: CodePushKey</span><br><span class="line"></span><br><span class="line">eg: </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>CodePushServerURL<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>http://192.168.1.3:3000/<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>CodePushDeploymentKey<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>aE8BkGLYt9TIThA1gobiJjzfcflZ4ksvOXqog<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="配置启动路径-jsCodeLocation"><a href="#配置启动路径-jsCodeLocation" class="headerlink" title="配置启动路径 jsCodeLocation"></a>配置启动路径 jsCodeLocation</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NSURL *jsCodeLocation = [CodePush bundleURL];</span><br><span class="line">RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation</span><br><span class="line">                                                        moduleName:moduleName</span><br><span class="line">                                                 initialProperties:properties</span><br><span class="line">                                                     launchOptions:launchOptions];</span><br></pre></td></tr></table></figure>
<h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReactNativeHost mReactNativeHost = <span class="keyword">new</span> ReactNativeHost(<span class="keyword">this</span>) &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getJSBundleFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里修改 JSBundleFile 路径</span></span><br><span class="line">        <span class="keyword">return</span> CodePush.getJSBundleFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">getUseDeveloperSupport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BuildConfig.DEBUG;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> List&lt;ReactPackage&gt; <span class="title">getPackages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Arrays.&lt;ReactPackage&gt;asList(</span><br><span class="line">			<span class="keyword">new</span> CodePush(</span><br><span class="line">				<span class="string">"aE8BkGLYt9TIThA1gobiJjzfcflZ4ksvOXqog"</span>, 应用的deploymentKey</span><br><span class="line">				getApplicationContext(),</span><br><span class="line">				BuildConfig.DEBUG,</span><br><span class="line">				<span class="string">"http://192.168.1.3:3000"</span> <span class="comment">//服务器地址</span></span><br><span class="line">			)</span><br><span class="line">		);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">  	<span class="meta">@Override</span></span><br><span class="line">  	<span class="function"><span class="keyword">public</span> ReactNativeHost <span class="title">getReactNativeHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      	<span class="keyword">return</span> mReactNativeHost;</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> CodePush <span class="keyword">from</span> <span class="string">"react-native-code-push"</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">    <span class="comment">// deploymentKey: 部署key，指定你要查询更新的部署秘钥，默认情况下该值来自于 Info.plist(Ios) 和 MainActivity.java(Android) 文件，你可以通过设置该属性来动态查询不同部署 key 下的更新。</span></span><br><span class="line">    <span class="comment">// installMode (codePush.InstallMode): 安装模式，用在向CodePush推送更新时没有设置强制更新( mandatory 为 true)的情况下，默认 codePush.InstallMode.ON_NEXT_RESTART 即下一次启动的时候安装。</span></span><br><span class="line">    <span class="comment">// mandatoryInstallMode (codePush.InstallMode): 强制更新，默认 codePush.InstallMode.IMMEDIATE。</span></span><br><span class="line">    <span class="comment">// minimumBackgroundDuration (Number): 该属性用于指定app处于后台多少秒才进行重启已完成更新，默认为0。该属性只在 installMode 为 InstallMode.ON_NEXT_RESUME 情况下有效。</span></span><br><span class="line">    <span class="comment">// updateDialog (UpdateDialogOptions): 可选的，更新的对话框，默认是null，包含以下属性 &#123;</span></span><br><span class="line">    <span class="comment">//      appendReleaseDescription (Boolean) - 是否显示更新description，默认false</span></span><br><span class="line">    <span class="comment">//      descriptionPrefix (String) - 更新说明的前缀。 默认是” Description: “</span></span><br><span class="line">    <span class="comment">//      mandatoryContinueButtonLabel (String) - 强制更新的按钮文字. 默认 to “Continue”.</span></span><br><span class="line">    <span class="comment">//      mandatoryUpdateMessage (String) - 强制更新时，更新通知. Defaults to “An update is available that must be installed.”.</span></span><br><span class="line">    <span class="comment">//      optionalIgnoreButtonLabel (String) - 非强制更新时，取消按钮文字. Defaults to “Ignore”.</span></span><br><span class="line">    <span class="comment">//      optionalInstallButtonLabel (String) - 非强制更新时，确认文字. Defaults to “Install”.</span></span><br><span class="line">    <span class="comment">//      optionalUpdateMessage (String) - 非强制更新时，更新通知. Defaults to “An update is available. Would you like to install it?”.</span></span><br><span class="line">    <span class="comment">//      title (String) - 要显示的更新通知的标题. Defaults to “Update available”.</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    CodePush.sync();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="配置与管理应用"><a href="#配置与管理应用" class="headerlink" title="配置与管理应用"></a>配置与管理应用</h2><h3 id="安装-code-push-cli"><a href="#安装-code-push-cli" class="headerlink" title="安装 code-push-cli"></a>安装 code-push-cli</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> npm install -g code-push-cli</span><br><span class="line">// 修改密码命令行</span><br><span class="line"><span class="meta">$</span> curl -X PATCH -H "Authorization: Bearer mJxbwjODns2IlrWRvrOGLIDWbHut4ksvOXqog" -H "Accept: application/json" -H "Content-Type:application/json" -d '&#123;"oldPassword":"123456","newPassword":"654321"&#125;' http://192.168.1.3:3000/users/password</span><br></pre></td></tr></table></figure>
<h3 id="登录服务器"><a href="#登录服务器" class="headerlink" title="登录服务器"></a>登录服务器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 登录，使用命令行后会打开网页，服务器地址请填写实际地址，登录后获取 token ，然后把获取到的 token 值复制到命令行中。</span><br><span class="line"><span class="meta">$</span> code-push login http://192.168.1.3:3000</span><br><span class="line">A browser is being launched to authenticate your account. Follow the instructions it displays to complete your login.</span><br><span class="line"> </span><br><span class="line">// 填写获取到的 Authentication key</span><br><span class="line">Enter your access key:  mJxbwjODns2IlrWRvrOGLIDWbHut4ksvOXqog</span><br><span class="line">//Enter your access key:  dp6hUimLgeBBrWfvz8wAQh4Y4izB4ksvOXqog 正式的access key</span><br><span class="line">Successfully logged-in. Your session file was written to /Users/oeffect/.code-push.config. You can run the code-push logout command at any time to delete this file and terminate your session.</span><br></pre></td></tr></table></figure>
<h3 id="常用命令行"><a href="#常用命令行" class="headerlink" title="常用命令行"></a>常用命令行</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 备注:OS是安卓就是 Android</span><br><span class="line"><span class="meta">$</span> code-push app add ksd_courier-ios ios react-native</span><br><span class="line"> </span><br><span class="line">Successfully added the "ksd_courier-ios" app, along with the following default deployments:</span><br><span class="line">┌────────────┬───────────────────────────────────────┐</span><br><span class="line">│ Name       │ Deployment Key                        │</span><br><span class="line">├────────────┼───────────────────────────────────────┤</span><br><span class="line">│ Production │ yYoA5qatsqgmr7NDq105USYkUYK74ksvOXqog │</span><br><span class="line">├────────────┼───────────────────────────────────────┤</span><br><span class="line">│ Staging    │ a688maXloQT2vPqjU0laqeBjtJUt4ksvOXqog │</span><br><span class="line">└────────────┴───────────────────────────────────────┘</span><br><span class="line"> </span><br><span class="line">// 查看所有APP</span><br><span class="line"><span class="meta">$</span> code-push app list</span><br><span class="line">┌─────────────────┬──────────────────────┐</span><br><span class="line">│ Name            │ Deployments          │</span><br><span class="line">├─────────────────┼──────────────────────┤</span><br><span class="line">│ ksd_courier-ios │ Production, Staging  │</span><br><span class="line">└─────────────────┴──────────────────────┘</span><br><span class="line"> </span><br><span class="line">// 添加自定义环境</span><br><span class="line"><span class="meta">$</span> code-push deployment add ksd_courier-ios Developer</span><br><span class="line">Successfully added the "Developer" deployment with key "aE8BkGLYt9TIThA1gobiJjzfcflZ4ksvOXqog" to the "ksd_courier-ios" app.</span><br><span class="line"> </span><br><span class="line">// 查看 APP 所有环境</span><br><span class="line"><span class="meta">$</span> code-push deployment list ksd_courier-ios --format json</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    "createdTime": 1479924559000,</span><br><span class="line">    "id": "1",</span><br><span class="line">    "key": "yYoA5qatsqgmr7NDq105USYkUYK74ksvOXqog",</span><br><span class="line">    "name": "Production",</span><br><span class="line">    "package": null</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    "createdTime": 1479924559000,</span><br><span class="line">    "id": "4",</span><br><span class="line">    "key": "a688maXloQT2vPqjU0laqeBjtJUt4ksvOXqog",</span><br><span class="line">    "name": "Staging",</span><br><span class="line">    "package": null</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line">// 更多查看 APP 信息的命令行</span><br><span class="line"><span class="meta">$</span> code-push deployment history ksd_courier-ios Production</span><br><span class="line"><span class="meta">$</span> code-push deployment add &lt;appName&gt; 部署</span><br><span class="line"><span class="meta">$</span> code-push deployment rename &lt;appName&gt; 重命名</span><br><span class="line"><span class="meta">$</span> code-push deployment rm &lt;appName&gt; &lt;deploymentNmae&gt; 删除部署</span><br><span class="line"><span class="meta">$</span> code-push deployment ls &lt;appName&gt; 列出应用的部署情况</span><br><span class="line"><span class="meta">$</span> code-push deployment ls &lt;appName&gt; -k 查看部署的key</span><br><span class="line"><span class="meta">$</span> code-push deployment history &lt;appName&gt; &lt;deploymentNmae&gt; 查看历史版本 </span><br><span class="line"><span class="meta">$</span> code-push deployment clear &lt;appName&gt; &lt;deploymentNmae&gt; 清除历史部署记录</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">// 打包 JS 文件和资源命令</span><br><span class="line"><span class="meta">$</span> react-native bundle &lt;command&gt;</span><br><span class="line"> </span><br><span class="line">--entry-file //ios或android入口的文件名称，一般叫 index.ios.js或 index.android.js</span><br><span class="line">--platform //平台名称(ios/android)</span><br><span class="line">--dev //设置为false的时候会对JavaScript代码进行优化处理。</span><br><span class="line">--bundle-output //生成的jsbundle文件的名称(包含路径)，比如./ios/bundle/index.ios.jsbundle</span><br><span class="line">--assets-dest //图片以及其他资源存放的目录,比如./ios/assets</span><br><span class="line"> </span><br><span class="line">e.g. :</span><br><span class="line"><span class="meta">$</span> react-native bundle --platform ios --entry-file index.ios.js --bundle-output ./ios/bundle/index.ios.jsbundle --dev false</span><br><span class="line"><span class="meta">$</span> react-native bundle --platform android --entry-file index.android.js --bundle-output ./android/bundles/index.android.bundle --dev false</span><br><span class="line"> </span><br><span class="line">// 发布命令（打包文件并上传到服务器）</span><br><span class="line"><span class="meta">$</span> code-push release-react &lt;appName&gt; &lt;OS&gt; &lt;updateContents&gt; &lt;deploymentNmae&gt; &lt;description&gt; &lt;disabled&gt; &lt;mandatory&gt;</span><br><span class="line">&lt;appName&gt; //必须 app名称</span><br><span class="line">&lt;OS&gt; //必须 发布平台iOS/Android</span><br><span class="line">&lt;updateContents&gt; //非必须 Bundle文件所在目录</span><br><span class="line">&lt;targetBinaryVersion&gt; //非必须 需要热更的app 版本</span><br><span class="line">&lt;deploymentNmae&gt; //必须 需要发布的部署</span><br><span class="line">&lt;description&gt; //非必须 描述 (更新客户端不可见必须有"hide"  eg: --description "hide xxxx")</span><br><span class="line">&lt;disabled&gt; //非必须 该版本客户端是否可以获得更新,默认为false</span><br><span class="line">&lt;mandatory&gt; //非必须  如果有则表示app强制更新</span><br><span class="line">e.g. :</span><br><span class="line"><span class="meta">$</span> code-push release-react ksd_courier-ios ios --plistFile ./ios/ksudi_courier_rn/Info.plist -d Test --description "描述"  --disabled true --m true</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>CI</tag>
        <tag>Code Push</tag>
      </tags>
  </entry>
</search>
